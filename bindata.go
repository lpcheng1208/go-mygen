// Package gomygen Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// tpl/curd.tpl
// tpl/entity.tpl
// tpl/example.tpl
// tpl/markdown.tpl
// tpl/tables.tpl
package gomygen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplCurdTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x4f\x6b\xe3\x46\x14\xbf\xeb\x53\xbc\x15\x4b\x90\x12\x33\xd9\x42\xe9\x21\xe0\x96\xc4\x56\xba\xa6\x89\x93\xda\x4a\x4b\x59\x96\x32\xb6\x9e\x83\xd8\x91\xe4\x8c\x46\xf9\xc3\x30\xd0\x42\x2f\x0b\xdd\xf6\xb4\x29\x6c\x4b\x4b\x96\x16\x7a\xe9\x6e\x0e\x2d\x3d\xf6\xcb\x34\x6e\x3e\x46\x19\x49\xb6\x65\xc7\x7f\x14\x48\xe9\x1e\xf6\x60\x8c\xe6\xcf\xef\xbd\xf7\xfb\xbd\x37\xef\x89\xb3\x3e\x82\x94\xa4\x2d\x78\xd2\x15\x2e\xed\x30\x6c\xd2\x00\x95\xda\x8d\x3c\x64\x10\xa7\xcb\x20\x8d\xfa\x16\xac\xc6\x47\x8c\xd4\xb7\x0c\x65\x18\xbd\x24\xec\x42\x13\x4f\x66\x5d\xb4\xbc\xce\xf0\xa8\x0d\xab\xf3\xa1\xa5\xc1\x51\x24\x3c\x84\x95\xb9\x67\xb4\xd9\x0d\xaf\x53\x31\x94\x36\xba\xbe\x7e\xfd\xcd\x9f\x57\xdf\x9e\x0f\x9e\x7e\x31\xf8\xe1\xe9\x3f\x2f\xbe\xba\xbe\xf8\xf5\xea\xb7\xef\x06\xaf\xfe\xc8\xfc\xb1\x82\x05\xe6\x6c\x38\x44\x51\x8b\x58\x12\x84\xb1\x65\xeb\xb8\xfc\xf0\x70\xec\x83\xa9\x39\xd8\x64\x6c\xdb\x47\xe6\xed\xf8\xb1\x50\x0a\xcc\xa2\xd1\xab\x9f\x5f\x5c\x5f\x7c\x3d\x78\x7e\x39\x78\xf6\x8a\x94\xb5\xd7\x8a\x4e\x62\x2b\x3e\x62\xee\xa9\xc8\x2d\x56\xa0\x4f\x39\x0d\x62\x20\x84\xf8\xa1\x40\xde\xa3\x5d\x94\xca\x06\x8b\x47\x27\x71\x0b\xe3\x84\x09\x78\xf4\x78\x26\x6e\x05\x90\x73\xfd\x8b\xb8\x0d\xd2\x38\x4a\x90\x9f\x65\x6b\x1b\x55\x08\x48\x7d\x8b\x7c\xac\x97\x72\x83\x43\x4b\x84\x10\xdb\xf0\xb0\x87\x1c\xd2\x1b\xa4\xc6\xa2\x18\x2d\xdb\xf0\x7b\xe9\xdd\x7b\x55\x08\x7d\x06\x2b\x2b\xc3\x2f\x2d\x9d\xc3\x79\x33\xd2\xde\x8f\x18\x32\x94\xd1\x8b\x86\x10\x4d\x3c\x15\x96\xf6\x81\x47\x27\xda\xb8\x94\xa4\x99\x30\x76\xc3\x63\xa9\x0c\x0d\x5a\xcd\xaf\xb5\xbb\x34\xb4\x0c\x29\x39\x0d\x0f\x11\xd2\x2b\x29\xdf\x71\x23\xec\x45\x4a\xad\xf0\xe8\x84\x48\x49\x1e\x26\x41\x3f\x8f\x78\x7d\x5d\x4a\x52\x8b\x82\x00\x43\xa1\x94\x21\x25\x86\x9e\x52\xa9\xef\xda\xe9\x7b\xd5\xd4\xe9\xf9\xbe\x77\xa3\x50\xf8\x61\x82\x86\x32\x0a\xfc\x56\x81\xf6\xfb\x18\x7a\x05\xce\x2b\xb3\xb3\x50\xce\xf7\x56\x4a\x4d\xe0\x11\x90\x0f\x23\x57\xd7\x90\xd9\x63\x11\x15\xef\xbd\x6b\xea\xad\x42\x0c\x1b\x37\xa2\x22\xdb\xd9\xc9\x19\xd1\xb1\x18\x61\x0a\xd6\x0f\xcb\x81\x36\xc2\xd2\x90\xc2\x0f\x90\xb8\x7e\x80\x25\x60\xf5\xb1\xd9\xa8\xcb\xef\xb6\xb3\x94\x9f\x2d\x62\xfe\xa7\x6c\xad\xcd\x30\xc5\xc6\xe5\xf6\xec\xf9\xa8\xdc\x6e\x51\x6d\xb7\x28\xb6\x3c\x17\x4a\x57\xda\x64\x91\x8d\x6d\x4d\xd4\xd9\x9b\x5e\x0f\x23\xa2\xc7\x04\x54\xff\x87\xcc\x87\xb7\x99\xaf\x94\x32\x26\xf2\xfe\xf3\xc1\xf7\xbf\x0f\xce\x2f\x6f\x91\xf2\x6d\x7a\x8c\xd3\x09\x7f\x4c\x59\x82\x37\xf3\xbd\x03\x9d\x28\x62\x53\x69\x1d\x8b\x40\x4c\xf6\x8f\x7d\x8e\x7d\xca\x87\xa0\xd3\x2d\xa2\x90\x3e\x59\x3f\xd1\x00\xa3\x76\xc2\xf3\x77\x34\xc7\x4b\xf7\x9c\x53\xec\x5a\xa9\x4b\x69\x75\xcc\x85\x3b\xa6\x1c\x68\xaf\x87\x5d\x51\x8b\x92\x50\x40\xaa\xbc\x51\x58\xc9\x60\xab\x90\x19\x21\x3a\x9b\x37\xd3\x5d\xf4\x6e\x74\xb2\x02\x6e\x47\x3f\xf5\x05\xdc\xf7\xe1\xc1\x04\xe7\x83\xf3\xcb\xab\x97\x3f\xfe\xfd\xd7\xc5\xe0\xcb\xd7\xa5\x28\xaf\x71\xa4\x02\xb3\x90\x66\x1f\xb4\xc1\x62\x34\x16\x0d\x2f\x0b\x62\x9a\xf2\x23\xe6\xe2\xa9\xd0\x04\x99\x8d\x66\xdb\x69\xb9\xd0\x68\xba\x7b\x60\xc2\x9a\x7e\x34\x0e\xfa\x7d\xe4\x05\x30\x58\x03\x13\x2c\x29\x49\x23\x8c\x91\x8b\xc2\x70\x62\xc3\x27\x9b\x3b\x07\x4e\xbb\xb0\xbb\x4b\xf9\x13\xa5\x6c\x73\x89\xae\x78\x67\xc2\x8e\x5f\x88\xcc\x81\xec\x75\xc8\xe4\x2e\xfd\x6c\xcd\x76\x23\xa3\x70\x4a\xf5\x1d\xbd\x98\x59\x5a\xa8\xfa\x84\xc2\xb7\x2d\xaa\x83\xbe\xb7\x5c\xe1\xd9\xe5\x54\xd0\xf6\x60\xbf\xbe\xe9\x3a\x0b\x65\x6d\x3b\x6e\xb6\xa7\xed\x15\xc7\xce\x4f\x1f\x3a\x2d\x47\x6f\xed\x73\x3f\xa0\xfc\xec\x23\x3c\x53\x0a\xaa\xf0\x81\x69\xe4\xed\x4c\xcb\x4a\x9f\xa0\xf5\xe8\x71\xa1\xca\x2b\xf0\xc0\x1e\x29\x72\xdf\xaf\xc0\xfd\x63\xca\xf4\xd1\xdc\x84\x46\x4f\xcd\x28\x95\xc3\x8c\xc6\xa0\xec\xbb\x02\x52\xea\x3b\x5a\x98\x5c\xa1\xe1\x74\x1c\x90\xd1\x5b\x83\x53\x1d\x2f\x63\xf9\xa7\x5f\xae\x5f\xbf\x2c\x8e\xc8\xa5\xb8\xde\xf6\x43\x6f\x09\xd3\x1c\x63\xed\x78\xc9\x91\xb8\x28\x41\xdb\xd9\x71\x6a\xae\x56\x20\x20\x13\xa3\xff\x1a\x98\xdb\xad\xbd\xdd\x79\xe2\x18\xb9\xc9\x61\xf2\xa5\xb7\x47\x83\x7c\x5a\x3d\x77\x30\xae\x6c\xfb\x3c\x16\xcb\x63\x2f\x3b\xa1\xdc\x45\xe0\x69\x56\xee\x34\x76\x1b\x2e\xbc\x63\x4e\x54\xfd\x98\x84\x12\x2f\xc8\x1d\x90\xa3\x0b\xfd\x0d\xe4\x66\xaf\x55\x77\x5a\xb0\xf5\x19\x34\xea\x50\x77\xda\xb5\xff\x84\xac\x8c\xa9\x72\xcd\x48\xf7\x34\xcb\x06\xab\x3b\x6e\x9a\x4b\x63\x87\xda\xde\x41\xd3\xb5\x56\x6d\x58\x58\x04\x0b\x46\xde\xc5\x11\xdd\x98\x6f\x57\x52\xef\xca\x70\xf0\x6f\x00\x00\x00\xff\xff\x4a\x6f\x33\xf8\x8b\x10\x00\x00")

func tplCurdTplBytes() ([]byte, error) {
	return bindataRead(
		_tplCurdTpl,
		"tpl/curd.tpl",
	)
}

func tplCurdTpl() (*asset, error) {
	bytes, err := tplCurdTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/curd.tpl", size: 4235, mode: os.FileMode(420), modTime: time.Unix(1563964184, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplEntityTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xc1\xca\xc2\x30\x0c\xc0\xf1\x7b\x9f\x22\x87\x1d\x3f\xf6\x00\x1f\x78\x12\x76\xdc\x41\xf6\x02\xd5\x05\x99\x36\xeb\xc8\x32\xc6\x08\x79\x77\x99\x5a\x29\x15\xec\xad\xff\x36\xe1\xe7\x54\xeb\xce\x9f\x03\x1e\x23\x11\x8e\x62\xe6\x64\x9b\x10\x52\x36\x83\x59\x78\xb9\x08\xa8\x53\x65\x3f\x5e\x11\xaa\xdb\x1f\x54\x83\x20\xc1\xff\x01\xea\x66\xc0\xd0\xcf\x66\xaa\xcf\x56\xb7\x9e\xf6\xa9\xd7\x49\xb1\xdb\xa6\x77\x4c\xa5\x89\x4c\x5e\xd2\x30\x14\xff\x4f\x48\x9e\xef\x66\x4e\x15\xc7\xde\xcc\x59\x09\x6d\x97\x10\x32\xec\x7e\xfd\x0d\xe6\xb8\x96\x5e\x8e\x6b\xc6\x4d\x61\xdf\xf4\xe1\x42\xf6\xf2\x8d\x7a\x04\x00\x00\xff\xff\xad\x16\x22\x7f\x3e\x01\x00\x00")

func tplEntityTplBytes() ([]byte, error) {
	return bindataRead(
		_tplEntityTpl,
		"tpl/entity.tpl",
	)
}

func tplEntityTpl() (*asset, error) {
	bytes, err := tplEntityTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/entity.tpl", size: 318, mode: os.FileMode(420), modTime: time.Unix(1553076821, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplExampleTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x6d\x6b\x1b\x47\x10\xfe\x3e\xbf\x62\xbb\x60\xe7\xce\x5c\xee\x9c\x3a\x29\xe1\x40\xb4\x95\xe4\xd0\x40\x92\xba\xd8\xa5\x1f\x4a\x09\xeb\xbb\x95\xb4\xf8\x6e\xf7\xb4\xbb\x97\xc6\x15\x02\x05\x4a\x93\x90\xc4\x0e\xa4\x49\xa0\x75\xfa\xee\xbe\x50\xa8\xfd\xa1\x34\x46\x49\xe9\x9f\xf1\x9d\xec\x7f\x51\x56\x77\x92\xa5\xb8\x69\x4a\x68\xe9\xb7\xd9\xd9\x99\xd9\x67\x9e\x79\x66\x13\x12\xac\x91\x26\x45\xb1\x08\x69\xa4\x00\x58\x9c\x08\xa9\x91\x05\x38\x24\x9a\xac\x12\x45\x3d\xd5\x8e\x30\xe0\x46\xac\x31\x5c\x46\xb8\xc9\x74\x2b\x5d\x75\x03\x11\x7b\x4d\x71\x52\xb5\xa3\x93\xa1\x64\x57\xa8\xf4\xe2\xf5\x22\x50\x53\xa5\x19\x6f\x62\xc0\x4a\x4b\xc6\x9b\x0a\x03\xe6\x54\x7b\xa9\x8c\x30\xd8\x00\x7a\x3d\xa1\xa8\x5e\xad\x09\xde\x60\xcd\x45\xae\x99\x5e\x47\x4a\xcb\x34\xd0\xa8\x03\x6f\x09\xa5\x11\x42\xa8\x48\x45\x9e\x97\x6d\xed\x66\x8f\x7a\xb0\x64\x40\x21\x84\x18\xd7\xc8\xf3\x06\x3f\xef\x64\x9b\xdf\xc2\x25\x12\xd3\xa9\xe0\xc1\xa7\x3f\xe6\x37\x1e\xc3\x12\x51\x6a\xba\xc8\xce\x27\x83\xaf\xae\x41\xbd\x5a\x64\x1c\xf9\xfb\xf7\xb2\xbb\x77\xa0\xd6\x22\x52\x51\x3d\x51\xe7\xe9\x03\x13\xbf\xc2\x62\xfa\x91\xe0\xf4\xe8\x22\x7f\xf8\x5b\x76\xbb\x0f\x17\xc9\xd5\xf3\x61\x44\x4b\x34\xf9\x56\x2f\xfb\xee\x87\xc1\x4f\xfd\xc3\x87\xbf\x1e\xfc\xf1\x45\xbe\xb1\x6d\x02\xde\x4e\x28\x9f\x0a\x28\xae\xf2\xfb\xbb\xd0\x05\xf0\xbc\xf1\x31\xbf\xf3\x4b\xd6\xbf\x07\x8d\x94\x07\xe8\x3c\x67\xba\x5e\xb5\x82\x46\xf3\x19\x86\x6c\x34\xa7\xda\x91\x5b\xaf\xa2\x0e\xb0\x46\x09\x48\xb9\x8b\xed\x94\x44\xe7\x44\x14\x9a\x14\x77\x84\xd7\x41\x18\xdb\xa8\x03\x93\x3e\x54\x41\xf8\xc4\x9b\x8a\x11\x6f\xb9\x45\x78\xb3\x45\xd8\x09\x0c\x5d\x08\x15\x47\x7e\x05\x35\x62\xed\x2e\x27\x92\x71\xdd\xb0\xf0\x8c\xf2\x67\xd4\x1b\x3a\x48\x2c\x63\x85\xb6\x37\xa3\x5e\x0f\x0a\x8a\x2a\x33\x6a\x36\x31\x96\x29\x5b\xd1\x32\xa5\xb3\x91\x08\x2a\x17\x44\x40\xa2\x59\xcd\x62\x7a\xd9\xbc\x55\x99\x51\xd8\x19\xbe\x6e\xf8\x2e\x2c\x33\x93\xc2\x32\x23\x2e\x7d\x42\x96\x56\x31\x99\xc2\x2e\xa7\xe1\x40\x2a\x23\xf7\x9d\x94\xca\xf5\x45\x15\x90\x84\x4e\xb5\x68\x3b\x60\x43\x20\x38\xa7\x81\x66\x82\x3b\x88\x4a\x69\x1a\x31\x24\x19\xe6\x2d\x5c\xc8\xd1\x41\xa1\xe2\xb6\xa1\xcc\x04\xbc\x52\x41\x9c\x45\xa8\x03\x09\xe1\x2c\xb0\xa8\x94\x36\x74\x27\xca\xb8\xcb\x54\x97\xa3\xab\x09\xce\xd5\xf0\xc9\xd2\x61\x1f\x8f\x33\x1a\x98\x8a\x33\x0e\x1b\x24\xd5\xa9\xe4\xe8\x28\x1c\xba\x70\x85\x48\x54\xaf\x8e\x86\x38\x3c\x76\x3a\x43\x7a\xba\xdd\xfa\x2a\x9a\x1b\x1f\x2e\x9a\x3d\x84\x42\x0d\x8c\x33\x5d\x1b\x57\xb1\xca\x91\x9a\x36\xa7\xc5\x51\xac\x8d\x8f\x23\x33\x86\x96\x50\x1a\x3b\xc3\x85\xf1\x17\x16\xe6\xcf\x3a\xc3\x35\xf1\xb1\x14\x62\xe8\x27\x4a\xf9\xf8\xd4\xab\x0b\xa7\xcf\xbc\x86\x9d\x72\x25\x7c\xbc\xc6\x78\x18\xd1\x10\x3b\xa3\x65\xf0\x71\xaa\x1b\x67\xe3\xd5\xd3\xd8\x19\xa9\xd9\x3f\x35\xef\x8c\xa4\xef\xa3\x33\x0e\x74\xa1\x5e\x45\x95\x09\xd1\xda\x30\xd9\x54\x05\x5d\xa2\x1f\x8e\x1d\x56\xbd\x6a\x17\xca\xcf\xbf\xdc\x3e\xd8\xf9\x26\xbf\xd9\xcb\xb7\x6e\x0e\x3e\xfb\xb8\x58\x81\xa2\xe3\x15\xaa\xf4\x38\xe3\x1c\xe3\xe1\x7b\x2d\x2a\xa9\xa5\xd1\x5c\xf9\xab\xb8\x2b\x86\x85\x67\x89\x81\x55\x21\xd6\x0c\x2f\xe3\xdc\x0e\x78\x9e\x16\xa1\x80\x2e\x48\xaa\xd2\x48\x8f\x15\x32\x81\xd0\x35\x2f\x58\xb3\x26\xd9\x36\xbf\xc1\xf5\xdf\xf3\xfb\xbb\x87\xd7\x6f\x1f\x6e\xf5\x0e\xbe\xbf\x96\xdf\x7a\x9a\x6f\x6c\xef\xef\xf5\xf6\xf7\x6e\xa9\x76\x74\x4c\x43\xda\x5d\x94\x52\xc8\x91\x8a\xcc\x0a\x2d\x99\x0d\x8a\xb8\x55\x3c\xf9\xfe\xfc\x07\xe6\xc2\xf3\x0e\x36\x1e\x67\x9b\x0f\xcc\x2f\x70\x77\x63\x7f\xaf\x97\x3f\xfa\xfa\xb9\x3d\x5f\x20\x4a\xbf\xb8\xdd\xbf\x6d\x49\x2a\x6d\x71\x16\x1d\x17\xfd\x0b\x01\x4f\xa1\xed\x3d\x19\x92\xb1\xf9\x17\x20\x6b\x22\xe5\xff\x37\xca\xec\xc6\xe7\xd9\x93\xfe\x73\x79\xac\x49\x4a\xf4\x3f\x10\x4e\x18\xbe\x84\x6c\xca\xe2\xb3\x61\xf8\x2f\xc3\x5f\xbc\x4a\xe2\x24\xa2\xef\x26\xe1\x7f\x07\xbe\x2c\xfe\xd2\xe0\xff\x0c\x00\x00\xff\xff\xdc\x57\x0d\x95\x31\x08\x00\x00")

func tplExampleTplBytes() ([]byte, error) {
	return bindataRead(
		_tplExampleTpl,
		"tpl/example.tpl",
	)
}

func tplExampleTpl() (*asset, error) {
	bytes, err := tplExampleTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/example.tpl", size: 2097, mode: os.FileMode(420), modTime: time.Unix(1552904525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplMarkdownTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\xc1\x6a\xea\x40\x14\x86\xf7\xf3\x14\x07\xe2\x42\xe1\x26\x0f\x20\xdc\xbb\xb9\x6e\xe4\x5e\xac\x0b\xe9\x46\x5c\xc4\x7a\x5a\xa4\x49\x5a\xa2\x81\x86\x99\x01\x17\x85\x16\x4a\x5b\x17\x05\xb3\x2a\x14\x44\xec\xa2\x4a\x69\x0b\x62\xfa\x38\xce\xa8\x6f\x51\x32\x63\x62\x5b\x9b\xc5\x09\xe7\xff\x0f\xe7\x4f\xbe\x19\xc3\x80\xd5\xc3\x58\xf6\x62\x39\x3a\x27\x84\x89\xf9\xad\xb8\x1c\xb0\x44\x13\xfd\x6b\x60\xb0\x9a\xbe\xca\xe8\x06\x18\x88\xe1\x85\x7c\x19\x03\x23\xac\x68\x9a\xa6\x2a\x69\x05\xfd\x22\x94\xfa\xb6\x77\x84\x60\xd5\xec\xa6\x83\xff\xdb\x9d\x2e\xe7\x0c\x28\xb5\xca\x5e\x0b\xcf\x38\x67\xf5\xa4\x51\x66\xc5\x76\x91\xf3\x46\xde\xd8\xba\x5f\xad\x02\xe8\x87\x51\x6a\xfd\x3d\x71\x5d\xf4\xd4\xb2\x24\x04\xbd\x16\xe7\x24\x4b\xcb\x1d\x63\xf8\x0b\x72\xed\x2e\xba\x50\xfc\x0d\x56\x09\x3b\x07\x3a\x9b\x18\x86\x01\x94\x2a\x2b\x4d\xb1\xd2\xfe\x53\x16\xf9\x93\x4d\x65\x51\x84\x98\x0a\xc2\xd3\x40\x4e\xde\x34\x84\x04\x8f\x6a\x81\xc1\xf2\x39\x16\xf7\x57\xc0\x40\x46\x53\xd1\x1f\x2d\x66\xf3\xe5\xe3\x9c\xc1\x3a\x8e\x56\x93\xa1\xe8\xbd\x67\x8e\x8c\xa6\x8b\x59\xbc\xbe\x9b\xec\xb2\xdc\xa0\x34\x77\x81\x7e\x13\xb6\x64\xf5\x47\x6e\xc8\x2a\x32\x4e\xe0\x7a\xfa\x2f\x00\x14\x6b\x2d\xd5\xc2\x53\xac\x04\x6e\x13\x7d\xce\xb5\x5e\xee\x54\x02\xc7\xd9\x1c\x48\x09\x0f\xed\xc0\xe9\xee\xdb\x4e\x80\xe9\x40\xd5\x6f\xbb\xb6\x1f\xfe\xc3\x30\x55\xf4\xaa\x1f\xe9\xd7\x6b\x7b\xd5\x46\xde\xc8\xae\x4e\x21\x75\x3e\x02\x00\x00\xff\xff\xd7\x32\xbc\x15\x50\x02\x00\x00")

func tplMarkdownTplBytes() ([]byte, error) {
	return bindataRead(
		_tplMarkdownTpl,
		"tpl/markdown.tpl",
	)
}

func tplMarkdownTpl() (*asset, error) {
	bytes, err := tplMarkdownTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/markdown.tpl", size: 592, mode: os.FileMode(420), modTime: time.Unix(1552988812, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplTablesTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\x4a\xce\xcf\x2b\x2e\x51\xd0\xe0\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x50\xc9\x2c\x49\xcd\x55\xb0\xb2\x55\xd0\xab\xad\xe5\xaa\xae\x06\x73\xf5\x42\x0b\x0a\x52\x8b\x42\x12\x93\x72\x52\xfd\x12\x73\x53\x6b\x6b\x15\x14\x14\x14\x6c\x15\x94\x60\xd2\x48\x32\x4a\x0a\xfa\xfa\x30\x61\xe7\xfc\xdc\xdc\xd4\xbc\x92\xda\xda\xea\xea\xd4\xbc\x94\xda\x5a\x2e\x4d\x40\x00\x00\x00\xff\xff\xe2\xac\xd0\x9a\x72\x00\x00\x00")

func tplTablesTplBytes() ([]byte, error) {
	return bindataRead(
		_tplTablesTpl,
		"tpl/tables.tpl",
	)
}

func tplTablesTpl() (*asset, error) {
	bytes, err := tplTablesTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/tables.tpl", size: 114, mode: os.FileMode(420), modTime: time.Unix(1552876725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/curd.tpl":     tplCurdTpl,
	"tpl/entity.tpl":   tplEntityTpl,
	"tpl/example.tpl":  tplExampleTpl,
	"tpl/markdown.tpl": tplMarkdownTpl,
	"tpl/tables.tpl":   tplTablesTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"curd.tpl":     &bintree{tplCurdTpl, map[string]*bintree{}},
		"entity.tpl":   &bintree{tplEntityTpl, map[string]*bintree{}},
		"example.tpl":  &bintree{tplExampleTpl, map[string]*bintree{}},
		"markdown.tpl": &bintree{tplMarkdownTpl, map[string]*bintree{}},
		"tables.tpl":   &bintree{tplTablesTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
