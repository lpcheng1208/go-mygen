// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/tpl/curd.tpl
// assets/tpl/e.tpl
// assets/tpl/entity.tpl
// assets/tpl/example.tpl
// assets/tpl/init.tpl
// assets/tpl/markdown.tpl
// assets/tpl/tables.tpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTplCurdTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdd\x6b\xdb\x56\x14\x7f\x96\x40\xff\xc3\x99\x29\x41\x6a\x8d\x92\xb5\x63\x0f\x19\xee\x48\x6c\x65\x35\xcb\xd7\x6c\x65\x63\x84\x90\xca\xd2\x75\xa6\x45\x1f\xce\xd5\x75\xec\x20\x04\x1d\xec\xa1\x85\xb5\xeb\x4b\xd3\xd2\x95\x8d\x96\x6e\x94\x41\x3f\x1e\x36\xd6\xb7\xfd\x33\xb5\x97\x3f\x63\xdc\x2b\xd9\x92\x6d\xd9\x96\xd3\x74\x94\x91\x42\x49\x7c\x7d\xef\xf9\xf8\x9d\xdf\x39\xe7\xde\x13\x72\xd4\x40\xe0\xfb\x72\x95\xe0\xa6\x4e\x54\xad\x66\xa1\x75\xcd\x46\x41\xb0\xe6\x1a\xc8\x02\x8f\x2d\x83\x2f\xf0\x8a\xc0\x97\x96\xe1\xa2\x77\x60\xc9\xa5\x65\x81\x57\xdb\xe1\xef\x6a\x5b\xe0\x03\x81\x17\xf8\xf9\x79\x70\x5c\x02\x04\x6b\x8e\xa7\xe9\xc4\x74\x1d\x81\xaf\x37\x1d\x1d\xd6\x51\x2b\x4d\xbe\x68\xd4\x40\x96\xe5\x48\xa0\x04\x17\xc7\x1b\xe1\x0b\xbc\x59\x07\x0b\x39\xa2\x51\x93\xe0\x2a\x2c\xd0\x15\x00\x00\x8c\x48\x13\x3b\x30\x37\xf6\x68\xb4\x8f\xfe\x2b\x2d\x2f\x82\x51\xdb\x5e\xd8\xc9\x87\x6b\x01\xb3\x3b\xab\x04\x7a\xda\xd6\x3c\x82\x70\x69\x39\xcf\x4e\x06\xcc\xe5\x84\xbb\xe0\xd6\xbe\x45\x3a\x99\xec\xb5\xda\x16\x49\x1f\xb9\x69\x4e\x73\x59\xac\xe3\x38\xb5\xbd\x08\xa4\x9d\x17\x78\x2e\x88\x62\xc1\x4c\x3b\xb9\xf3\x57\xe7\xc7\xe3\xee\xad\x1b\xdd\x47\xb7\xfe\x79\xf8\xfd\xc9\xe3\x67\x9d\xe7\xf7\xbb\x2f\xfe\x8c\x0c\x14\xed\x09\xda\x25\xd8\x43\xa4\xe8\x5a\x4d\xdb\xf1\x44\x89\xb2\xc0\x74\xf6\xa8\x49\x91\x45\x39\x4a\x99\x25\xcb\x5a\x31\x91\x65\xac\x9a\x1e\x09\x02\xc8\xc5\x44\x08\x55\x77\x9e\x3e\x3c\x79\xfc\x43\xf7\xde\xab\xee\xed\x17\x72\x66\xad\x15\xb7\xe5\x89\xde\x81\xa5\xb6\x49\xa4\x37\x0f\x0d\x0d\x6b\xb6\x47\xe9\x62\x3a\x04\xe1\xba\xa6\x23\x3f\x90\x40\xc4\x6e\xcb\xab\x20\xaf\x69\x11\xd8\xde\xa1\x72\x37\xf7\xf7\x14\x87\x98\xe4\x28\x08\xd2\xb4\xe4\x01\x61\x4c\xff\xbb\x58\xa2\xde\x1c\x34\x11\x3e\x0a\x17\x17\x0b\x60\xcb\xa5\x65\xf9\x0b\xba\x14\xe9\xef\x29\x96\x65\x59\x62\x14\xa4\x1b\x3f\x28\x80\x63\xb2\xf0\xd0\x4f\xf4\x94\x22\x57\x89\xa6\xef\x8b\x08\x63\xa9\x87\x10\xc3\xc2\x40\x75\x84\x81\x29\x91\x8b\x96\xeb\x21\x51\x12\xf8\xba\xdb\x5b\x5a\x47\x6d\x22\x32\x3b\xb0\xdb\xa2\x06\x8c\x38\xb0\xde\xb4\xac\x11\x27\xfc\xa0\xa7\x3a\x14\x53\xd5\x35\x47\x14\x78\xdf\xc7\x9a\xb3\x87\x80\x1d\x62\x71\xf1\xca\x4e\xdd\x0d\x82\x39\xec\xb6\x64\xdf\x97\xaf\x35\xed\x46\x04\xc3\xfc\x3c\xd5\x55\x74\x6d\x1b\x39\x24\x08\xe8\x61\xe4\x18\x41\x90\xe6\x25\x65\x7f\xba\xa7\x71\x06\x86\xa9\x14\x07\xa3\x00\x5a\xa3\x81\x1c\x23\x11\xa0\x3c\x63\xf1\x94\xf8\xf8\x13\xdc\xf0\x7d\x6a\xda\x01\xc8\x9f\xb9\x2a\xad\x59\xb9\xba\xe5\x6a\xe4\xe3\x8f\x72\x4c\x54\xec\xdc\xe2\x88\xbb\xf2\x4a\xb8\x33\xd5\x6d\xcb\x43\x30\x24\xd8\x74\xb2\x89\x2d\x3b\x33\x08\x25\xa6\x8d\x64\xd5\xb4\x51\x06\xc1\x74\xdb\x0c\xc6\x5e\xb9\x9c\xcd\xd8\x2b\x97\xc7\x09\x9d\x7e\xbc\x1a\x66\xe2\x38\xe2\x44\x3f\x28\x81\x82\x81\x14\x48\x96\x83\xdb\xf7\xfa\xe5\x60\x96\x6a\xc0\x92\x11\x65\xab\x06\x11\xff\x4e\x5b\x0a\x06\xab\x40\x42\xf7\x60\x25\x78\x9f\xd3\x75\x6a\x51\x8a\x51\x2a\xbc\x07\x29\x09\xe7\x39\xf9\xae\x73\x72\x34\x1f\x77\xbb\x3f\xfd\xd1\x3d\x7e\x35\x4b\x2a\x56\xb5\x43\x34\xdc\x95\x0f\x35\xab\x89\x46\xd3\xb0\x06\x35\xd7\xb5\x86\xf3\xcb\x23\x36\x19\xec\xb4\x9b\x18\x35\x34\xdc\x93\xfa\x16\x0d\x96\x8a\x8e\xfb\x2b\x8e\xda\x4d\xa4\x8a\x7d\xa9\xb4\x91\x2e\x32\x73\x4f\xdb\xca\x0f\x35\x0c\x5a\xbd\x8e\x74\x52\x74\x9b\x0e\x01\xc6\x47\x81\x4f\x2c\xe5\xa3\x2e\x19\xea\x97\xe9\x35\x66\x89\x7d\x8b\x0c\xf1\x54\x2a\x6b\xb4\x8d\x26\x54\x5e\x85\x85\xa1\x50\xbe\x4d\x30\xd5\xf6\x59\x86\x53\x6d\x9f\x87\xf3\xad\xc3\x39\x3f\x0f\xdd\xe3\x57\x9d\x27\x3f\xbf\xf9\xfb\x71\xf7\xbb\x97\xd9\x62\x59\xc4\x48\x23\x28\x44\x23\x4b\xdf\x93\x40\xb4\x34\x8f\x94\x8d\xd0\xe7\xe1\xb8\xea\xae\xe3\x11\xe8\x75\xdc\x02\xe4\xca\xeb\x55\xa5\xa2\x42\x79\x5d\xdd\x80\x1c\x5c\x8a\x9a\x1e\x13\xc8\x14\x6c\x35\x1a\x08\x27\xe4\xc3\x25\xc8\x81\xe8\xfb\x72\xd9\xf1\x10\x26\x89\x07\x82\x04\x5f\x2e\xad\x6e\x29\xd5\xc4\xb7\x6b\x1a\xde\x0f\x02\x29\x37\xad\x3c\xa0\xff\x82\x50\x89\x46\x17\x5a\x17\x36\xb9\x90\x67\xef\xb0\x21\x87\xe1\x18\xe2\xdb\x2a\x5d\x0c\xad\x38\x25\xdf\x26\x51\x0b\x48\x7b\x16\x76\xa9\xed\xff\x1b\xbf\x86\xea\xd5\x39\xbf\xce\x80\x5f\x33\xb7\xa1\xad\x86\x31\x6b\xe9\x4a\x6f\x46\x23\xa4\xda\xda\x2c\x2d\xa9\x4a\x76\x3e\x55\x15\x15\xd8\x77\xd4\xa0\xe4\x4c\xe3\xab\x6b\x4a\x45\x61\x32\xb0\x69\x6b\xf8\xe8\x73\x74\x14\x04\x50\x80\x4f\x73\x02\x1f\x3d\x43\x28\x9f\xb4\x7d\x24\x6e\xef\x24\xfa\x66\x1e\x16\xa4\x38\xde\x17\xcc\x3c\x5c\x38\xd4\x2c\xba\x37\x52\x42\xe5\x33\x45\x41\x10\xc9\xe9\xbf\x99\xc3\xcf\x79\xf0\x7d\x7a\x86\x05\x3d\x0a\x7f\x7f\xfc\x62\xcb\xfd\xfb\xd8\xc8\xe3\x24\xbe\x19\x24\x23\x92\x39\xe3\x43\xf3\x66\xcc\xf8\xf3\xb0\x24\xc2\x12\xdd\xac\x26\x05\xe6\x97\x5f\x4f\x5e\x3e\x49\x8e\xc7\xb2\xc5\x66\xc5\x74\x0c\x91\x3e\x74\x91\x47\x0d\x3d\xdd\xcc\xab\x17\x8f\xc5\x02\xe4\xaa\xca\xaa\x52\x54\x69\x3c\x6c\x79\x60\xe0\x77\x09\x72\x2b\x95\x8d\xb5\x4c\xa1\x62\x25\x8f\xda\x93\xef\xcf\x89\x92\x63\xbc\xb0\xb6\x9e\xd5\x48\x60\xc5\xc4\x1e\x11\xcd\xa8\xbb\x84\x58\x9c\xf2\xc5\x7f\xe6\x40\x30\xce\xa6\x90\x12\x56\xcb\x6b\x65\x15\x3e\xcc\x0d\x36\x87\x18\xa8\x98\x2f\xa6\x31\x16\xab\xee\xa3\x1b\x9d\xbb\x77\xde\xbc\xbe\x31\x23\x62\xb4\xd2\x8b\xef\x21\x50\x1b\x95\x92\x52\x81\xe5\xaf\xa1\x5c\x82\x92\x52\x2d\x66\x46\x29\x05\xa1\xce\xed\x7b\x9d\x9b\xf7\x67\x41\x65\xd3\x6a\xea\xfb\x29\x3c\xb2\xb5\xc6\x36\x5b\x1a\x2c\x1b\x83\x80\x70\x23\x95\x2d\x84\x05\xae\x0f\x45\xff\x7a\x9e\x2d\x55\x91\xee\x3a\x46\x54\x57\xae\xc3\x6c\x38\xb5\xbe\x41\x18\x8d\xa9\x75\x1c\x76\x5b\xde\xb8\xf9\x75\x4c\x28\x6e\xa4\xbb\x73\x5c\x7a\x7f\xe7\xb8\x1e\xb4\x5c\x20\xf0\x5c\x78\xbf\xa1\x4a\xe2\xfb\x0d\x87\x7b\xd3\x23\x56\x5f\x53\x01\xa3\xdb\xe8\x13\x4b\x14\x78\x0e\x00\x60\xb7\x07\x74\xef\x33\xad\xba\x89\xfd\x02\xcf\xd1\x23\x75\x37\x52\x16\x4f\xc6\x7b\x86\xb2\x65\x36\x3a\x9b\xdb\x35\x8d\x3c\xcc\x51\x11\xcc\xe0\x14\xdf\xc6\x8f\xac\xb9\x84\x83\xcc\xc3\xc8\x9b\xed\x5d\xd3\xd8\x81\x02\x33\x2c\xf2\x7d\x6c\xc5\x7a\xf3\xfa\xf7\x59\x98\xb6\xe1\xa0\x14\x9e\xa5\x5e\x8e\xb9\xd1\x4c\x1b\xa5\xd4\x59\xd0\xa7\xd0\x27\xcf\x84\x89\xe7\x00\x75\x06\x22\x10\xfa\x20\x7d\x32\x0c\xfc\x24\xdc\x07\x78\x95\x8e\x6d\x58\xd8\x32\x3e\x4c\xe8\x1b\x9a\x96\x35\x3d\x7e\xbf\x0f\xc3\x09\x29\x70\x16\x37\xb6\xd6\x55\xf1\xa2\x94\x1d\xc5\x69\xa3\x61\x29\x65\xbc\x3b\xc7\xac\x3a\x93\x6b\x75\xe7\xe6\xd3\xee\xf1\xf3\xee\x83\x97\x9d\xbb\xbf\x75\x9e\x3f\xe8\x3c\x7a\x96\x0d\x20\xa5\x6d\x7a\xc4\x4b\x32\x2f\xfd\x92\x96\xc6\xb9\xd9\x41\x9a\x5e\xa9\xa6\xcd\xd7\x43\xb6\xd1\xa2\xa1\x27\x27\x32\xdc\x78\x6c\x53\x32\x3f\x33\x01\xcd\x7a\xa4\x26\xfa\x63\x32\xc7\xd5\xa0\x00\x04\x37\xd1\x78\xae\xfe\x1b\x00\x00\xff\xff\xf0\x47\x9b\xcd\x2a\x1f\x00\x00")

func assetsTplCurdTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplCurdTpl,
		"assets/tpl/curd.tpl",
	)
}

func assetsTplCurdTpl() (*asset, error) {
	bytes, err := assetsTplCurdTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/curd.tpl", size: 7978, mode: os.FileMode(511), modTime: time.Unix(1585826572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplETpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\xc1\x6b\xd4\x4e\x14\xc7\xcf\x3b\x30\xff\xc3\x63\x4f\x09\x84\xc9\xbd\x3f\x7e\x27\x5d\x6f\xf6\xa0\x82\xe7\x49\x7c\xc9\x86\x66\x33\xdb\x37\x13\xaa\x94\x3d\x28\x4b\x59\x41\xa1\x07\x95\x6e\x4f\x15\x4a\xc1\x83\x8d\xc7\x55\x2a\xfe\x33\x3b\xd9\xf6\xe4\xbf\x20\x93\x6c\xdc\x56\x45\x41\xf0\x14\xde\x37\xdf\x99\xf7\xf9\xc0\x64\xa3\xb1\x22\x03\x1e\x67\xbd\xfe\x23\x69\x64\x24\x35\x86\x7a\x37\xef\x73\xe6\xa2\x34\x33\xc3\x32\x12\xb1\x1a\x85\xe3\x9d\x34\x44\x22\x45\xba\xcf\x99\xef\x7e\x87\x21\xd8\x8b\x67\x76\xb1\xb0\xe7\xc7\xcb\x8f\xcf\x39\x33\x4f\xc6\x08\x03\xd0\x86\xca\xd8\xc0\x3e\x67\x93\x75\xed\xf2\xfc\x83\xfd\xfc\xda\x9e\x1c\xd4\x27\x33\xce\x92\xb2\x88\xc1\x43\x18\xf8\x70\xdf\xc8\x78\xc7\x43\x22\x68\xae\xf6\xdb\x8f\x3b\xda\xcb\x12\x88\x02\x40\x84\xad\xff\x01\x45\xa6\xb7\xcb\x3c\x77\x4d\xff\x3f\x88\x9a\x42\x8f\xd0\x94\x54\x00\x22\x67\xbd\x09\x60\xae\xf1\x66\xde\xc0\x8a\x87\x99\x19\xae\xd7\xa0\xef\x9a\x1b\xac\x16\xe8\x6a\x3e\xb5\x8b\xb3\xe5\x97\xb7\xf5\xd3\xea\x67\xb8\xbb\x3a\xdd\xf0\x05\x30\xd2\xa9\xf3\xcb\x8a\xf4\xef\x58\x89\x7e\x0f\x4b\x72\xec\x21\x36\x7b\xfe\x08\x0b\x89\xa2\x91\x34\xbf\x64\xbe\x73\x1d\xba\xed\xad\xb9\x03\x90\x94\x6a\x10\x42\x64\x85\x41\x4a\x64\x8c\xfb\x93\x7f\x26\x93\x34\x36\x2d\x40\xbb\x59\x08\xf1\xa3\xd9\xec\xb4\x7e\xf3\xbe\x3e\xaa\xec\xe1\x59\x7d\x54\xad\xde\x7d\x5a\x1d\x4f\xaf\x5e\xcd\x2f\xab\xea\xeb\xc5\x0b\x3b\x9b\x2f\x17\x2f\xed\xe9\x74\x75\x78\x70\x43\x75\x43\xd6\x3d\x1e\x2f\x52\x2a\x0f\xba\xc9\x11\xe9\xbd\xcc\xc4\x43\x97\x34\x63\x2c\x35\x82\xde\xcd\xc5\x80\x68\x5b\xdd\x53\x7b\x3a\xe8\xc6\x5b\xaa\x28\x6e\xab\x02\xbf\x07\x0f\x1e\xbb\x71\xeb\x9a\x96\xa1\x12\x83\xce\x9a\xb3\x2e\x4e\x64\xae\xbb\x7c\xc2\xd9\xb7\x00\x00\x00\xff\xff\x75\xdf\xbe\x7f\x52\x03\x00\x00")

func assetsTplETplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplETpl,
		"assets/tpl/e.tpl",
	)
}

func assetsTplETpl() (*asset, error) {
	bytes, err := assetsTplETplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/e.tpl", size: 850, mode: os.FileMode(511), modTime: time.Unix(1585652912, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplEntityTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x41\x0a\xc2\x40\x0c\x45\xf7\x85\xde\x21\x8b\x2e\xa5\x07\x10\x5c\x09\x5d\x76\x21\xbd\xc0\x68\x83\x54\x67\x3a\x25\x4d\x29\x25\xe4\xee\x12\x75\xa4\x54\xc1\x59\x4d\x5e\xfe\x0f\x2f\xcf\x44\xca\xc6\x9d\x3d\x1e\x63\x08\xd8\xb3\x6a\x9e\xf1\x32\x20\x24\xae\x0a\x23\xd3\x74\x61\x10\x0b\x93\xeb\xaf\x08\xc5\x6d\x07\x45\xc7\x18\x60\x7f\x80\xb2\xea\xd0\xb7\xa3\xaa\xc8\x93\x95\xb5\x0b\x56\x7b\xbd\x04\x9b\x65\x78\xc3\x44\xaa\x48\xc1\x71\x2a\xc3\x26\x7f\xc2\xe0\xe8\x6e\x3a\x22\xd8\xb7\xf6\xd1\x2f\xdb\x7a\xf2\x7e\x6d\x6c\xf3\x1f\x6b\x8a\xf3\x56\x9a\xe2\xbc\x72\x4e\xc0\x4e\x7d\x9c\x61\xb5\xf9\x65\xf6\x08\x00\x00\xff\xff\x6e\x2e\x32\xff\x48\x01\x00\x00")

func assetsTplEntityTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplEntityTpl,
		"assets/tpl/entity.tpl",
	)
}

func assetsTplEntityTpl() (*asset, error) {
	bytes, err := assetsTplEntityTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/entity.tpl", size: 328, mode: os.FileMode(511), modTime: time.Unix(1584588363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplExampleTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x6d\x6b\xdc\x46\x10\xfe\x2e\xd0\x7f\xd8\x0a\xee\x22\x99\x8b\xe4\xd4\x49\x09\x82\xa3\xed\xbd\x84\x06\x92\xd4\xc5\x2e\xfd\x50\x4a\xd8\x93\xf6\xee\x16\x4b\xbb\xba\xdd\x55\x1a\xd7\x18\x2e\x50\x9a\x84\x24\x76\x20\x4d\x02\xad\xd3\x77\xf7\x85\x42\xed\x0f\xa5\x31\x97\x94\xfe\x19\x4b\x67\xff\x8b\x32\x92\xee\xcd\x75\x8a\x69\x09\xe4\xdb\xec\xec\xcc\xce\xcc\xf3\x3c\xb3\x11\xf6\x56\x70\x87\xa0\x70\x55\xf6\x02\x5d\xd3\x35\x1a\x46\x5c\x28\x64\xea\x9a\xe1\x63\x85\x5b\x58\x12\x47\xf6\x02\x43\xd7\x8c\x76\xa8\x0c\x5d\xbb\x8a\x8c\x0e\x55\xdd\xb8\x65\x7b\x3c\x74\x3a\xfc\xb4\xec\x05\xa7\x7d\x41\xaf\x11\xe1\x64\xaf\x40\xa8\x22\x52\x51\xd6\x01\x53\x2a\x41\x59\x47\x82\xc9\x88\x72\x62\x01\x01\x16\x94\x52\xab\x11\x41\x8d\x5a\x9d\xb3\x36\xed\x34\x99\xa2\x6a\x15\x49\x25\x62\x4f\xa1\x35\x5d\x7b\x87\x4b\x85\x10\x42\x79\x3e\x72\x9c\x64\x6b\x37\x79\xd2\xd7\xb5\x45\xe8\x0f\x21\x44\x99\x42\x8e\x33\xfc\x75\x27\xd9\xfc\x5e\xd7\xae\xe0\x90\xcc\x84\x0f\x3f\xff\x39\xbd\xf5\x54\xd7\x16\xb1\x94\xb3\xef\xec\x7c\x36\xfc\xe6\x86\xae\x35\x6a\x79\xce\xe4\x62\xf0\x20\xb9\x7f\x4f\xd7\xea\x5d\x2c\x24\x51\x53\x4f\x3d\x7f\x94\x65\x2c\xd3\x90\x7c\xc2\x19\x99\xdc\xa4\x8f\xff\x48\xee\x0e\x74\xed\x32\xbe\x7e\xd1\x0f\x48\xd1\x53\xba\xd5\x4f\x7e\xf8\x69\xf8\xcb\xe0\xf0\xf1\xef\x07\x7f\x7d\x95\x6e\x6c\x67\x11\xef\x46\x84\xcd\x44\xe4\x77\xe9\xc3\x5d\x5d\x5b\x07\x40\x1c\x07\x8d\x5d\xe9\xbd\xdf\x92\xc1\x03\x5d\x6b\xc7\xcc\x43\x17\x19\x55\x8d\x9a\xe9\xb5\x3b\x47\xf0\xb2\xd0\x9c\xec\x05\x76\xa3\x06\x88\xd1\x76\xd1\x98\xb4\x9b\xbd\x18\x07\x17\x78\xe0\x43\x8e\x3d\xea\xbb\x82\x0c\xc3\x82\xc8\x69\x27\xaa\x22\xe3\xd4\xdb\x92\x62\x67\xa9\x8b\x59\xa7\x8b\xe9\x29\x23\xeb\xc7\x97\x0c\xb9\x55\xd4\x0e\x95\xbd\x14\x09\xca\x54\xdb\x34\x4a\xd2\x2d\xc9\xb7\x94\x17\x99\x60\xf9\x96\x53\x92\x6f\x7a\x39\x5c\xd5\x92\x2c\x47\x60\xc1\xc3\x55\x25\x62\x52\x0e\xb8\x57\xbd\xc4\x3d\x1c\x94\x15\x0d\xc9\x55\xa8\x56\x2d\x49\xa3\x92\x37\x00\xe8\x17\x26\x70\x54\x98\x40\xfb\xc8\xcb\xc5\xc8\xcc\xb9\x2a\x0e\x05\x3f\x15\x5d\x8b\x45\x60\xbf\x17\x13\xb1\xda\x94\x1e\x8e\xc8\xcc\xb0\x56\x25\x93\x99\xc7\x19\x23\x9e\xa2\x9c\x55\x10\x11\x02\x26\x02\xc4\x80\x0b\xd3\xc8\xf5\x5a\x41\xbe\x64\x56\x86\x1f\x44\xbc\x56\x45\x8c\x06\x00\x53\x84\x19\xf5\x4c\x22\x84\x95\x01\x32\x79\xca\x5e\x22\xaa\x20\xb4\xce\x19\x93\x59\xe1\xc2\x61\x1d\x13\x08\xda\x98\x09\x04\x87\xa5\x6b\x82\xa8\x58\x30\x34\x89\xcf\xea\x5c\xc3\x02\x35\x6a\x23\x66\xf3\xf3\xda\x5a\x86\xd7\xfa\x7a\xa3\x85\xe6\xc6\x87\xcb\xdc\x27\xd9\xd6\x66\x2a\xa1\x8c\xaa\xfa\xf8\x29\x73\xc4\x34\x8c\x3c\xab\x9a\x62\xbb\x5c\x23\x00\x72\xba\x5c\x2a\xe0\x04\xe0\x76\x17\x16\xe6\xcf\x57\xf2\x6d\x72\x0d\xc1\x79\x7e\x83\xa5\x74\x8d\x33\xaf\x2f\x9c\x3d\xf7\x06\x9c\x73\x36\x5c\x63\x85\x32\x3f\x20\x3e\xb8\x0a\x4e\x5c\x23\x56\xed\xf3\x61\xeb\x2c\xf8\x0a\x40\xdc\x33\xf3\x95\xf1\x86\xb8\xe8\x5c\x25\x1b\xb2\x51\x43\xd5\x29\x5d\x5b\xba\x36\x3d\x62\x15\x5d\x21\x1f\x8f\x1d\x66\xa3\x66\x4d\x56\x24\xfd\x7a\xfb\x60\xe7\xbb\xf4\x76\x3f\xdd\xba\x3d\xfc\xe2\xd3\x7c\x57\x0a\x08\x96\x89\x54\xe3\xb4\x0b\x94\xf9\x1f\x74\x89\x20\xa6\x42\x73\xc5\x8f\x64\x2f\x67\xb0\x1c\x85\x4a\xd7\x5a\x9c\xaf\x00\x52\xe3\xec\x35\x28\xa6\xb8\xcf\xb3\xca\x82\xc8\x38\x50\x63\x09\x4d\xf5\x6a\x43\x19\xb3\x0c\xf9\x16\x7c\x22\x37\xff\x4c\x1f\xee\x1e\xde\xbc\x7b\xb8\xd5\x3f\xf8\xf1\x46\x7a\xe7\x79\xba\xb1\xbd\xbf\xd7\xdf\xdf\xbb\x93\xfd\xb0\xff\x10\x99\xb2\x9b\x42\x70\x31\x91\x19\x2c\xdc\x22\xec\x5b\xc0\xcc\xbc\xec\x87\xf3\x1f\xe5\x57\xf0\x41\x6c\x3c\x4d\x36\x1f\xc1\xff\x71\x7f\x63\x7f\xaf\x9f\x3e\xf9\xf6\xc5\x00\x5c\xc2\x52\x9d\x64\xf6\x7f\x1d\x4e\x48\x65\x32\x1a\x1c\xb7\x1f\x27\x68\xfd\x68\xdf\xfd\x67\x19\x3a\x9b\xc7\xb5\x5b\xe7\x31\x7b\x65\xfa\x4d\x6e\x7d\x99\x3c\x1b\xbc\x18\xdb\xba\x20\x58\x9d\x48\x59\xbe\xff\xdf\x74\x55\x54\x28\xfb\xfe\x4b\x9a\xa5\x79\x1d\x87\x51\x40\xde\x8f\xfc\x97\x3c\x49\x51\xe1\xff\x4d\xf2\x77\x00\x00\x00\xff\xff\x0f\x0d\x50\xf5\xaa\x08\x00\x00")

func assetsTplExampleTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplExampleTpl,
		"assets/tpl/example.tpl",
	)
}

func assetsTplExampleTpl() (*asset, error) {
	bytes, err := assetsTplExampleTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/example.tpl", size: 2218, mode: os.FileMode(511), modTime: time.Unix(1584588363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplInitTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x5d\x8b\xeb\x44\x18\xbe\x6e\x20\xff\x61\x0c\x74\x4f\x22\xa5\xd9\x76\xcf\x39\x48\x25\xa8\x6d\x8f\x28\x78\xfc\xa0\x7b\x2f\xd3\x64\xd2\x0e\x26\x33\xd9\x99\xc9\xb2\xab\x14\x8e\x37\xe2\x85\x47\x85\xa3\x9e\x9b\xa3\x08\x2a\x2a\x82\xbb\x17\xa2\x50\x04\x7f\x4d\x5b\xfd\x17\xf2\xce\x4c\xd2\xa4\xee\xe2\x55\x32\xcf\xfb\xcc\xfb\xf1\xcc\x33\x43\xf3\x82\x0b\x85\x7c\xd7\xe9\x78\x09\x56\x78\x8e\x25\x09\xe5\x59\xe6\x01\x90\xe6\x4a\x7f\x19\x51\x61\x29\x0c\x26\x95\xa0\x6c\x21\x3d\xd7\x09\x5c\xc7\x75\xce\xb1\xd0\x9b\x73\x2c\x15\x11\xd3\x31\x7a\x5e\x9e\x65\xfd\xe9\xd8\x75\x3a\x32\xc3\xe7\xa4\x89\xe8\x0d\x69\xc9\x62\x44\x19\x55\x7e\x80\x3e\x70\x9d\x4e\x9c\x2e\xd0\x28\x42\xc9\x7c\xc2\x59\x4a\x17\x00\x75\x5e\xe3\x52\x8d\x10\x42\xc8\xcb\x78\x8c\xb3\x25\x97\xca\xeb\x41\xe0\x6d\x2e\x4c\xe0\xe4\xe4\xf8\xbe\x46\xde\xc4\x39\x31\x54\xc1\x79\xc5\xc2\x52\x1a\x6c\x30\x3c\xb9\x7b\xef\xbe\x41\xa7\x63\xcb\xf5\xde\xa3\x2c\xc9\x48\x62\xe0\xc9\x12\x0b\x49\xd4\x08\x79\xa5\x4a\x5f\xc8\xe7\x77\x0d\xfc\x10\x5f\xbc\x55\x10\x36\x42\x83\xe3\xe3\x0a\x78\x3d\xc9\xc8\x08\xdd\xd3\xeb\x55\x73\xe6\x48\x0f\x34\x1d\xfb\x71\xba\x08\x5c\xa7\x13\x86\xd5\xec\x07\x91\x15\x28\xa0\x2e\x0b\x52\xcf\x8b\xa4\x12\x65\xac\xb4\x14\x30\x36\xb4\x8d\x8c\xc6\x28\x0c\x37\xcf\xae\x37\x5f\x3f\x72\x1d\x3d\xb8\x0e\x51\xa6\xbf\x61\xb8\xfb\xe5\x6a\xf3\xd9\x77\xae\xa3\x15\x68\xef\xda\x7d\xf1\xd3\xf6\xe3\x3f\x60\x17\x96\xf2\x20\xe1\xd5\x47\xbb\x6f\x3f\x74\x1d\xab\x46\x2b\xb4\x7e\xb2\xf9\xfc\xb1\xeb\x54\x8a\x34\x13\xfe\xf9\x95\xd9\x75\x4a\x73\xf2\x3e\x67\x64\x1f\xda\x3e\xfd\x7d\xf3\xc9\xda\x75\x2a\x7d\x1a\x1d\x6e\x9f\x3d\xda\x7c\xff\xe3\xee\xe7\xf5\x3f\x4f\x7f\xfb\xfb\xaf\x6f\xb6\x9f\xfe\x60\x68\xa0\xeb\x7f\x68\x86\xb0\xfd\xf2\xda\x8a\x14\x86\xa8\x86\xb6\x8f\x7f\xdd\xac\x9f\x34\xac\x63\xf4\xac\x35\x0c\x2a\x8b\x69\x15\x69\x6a\xbb\x93\xfd\x07\x67\x25\xce\x5e\xe5\x59\x02\xf4\x7e\xd5\x7c\x0f\x79\x9e\xf1\x5e\xa7\x09\xa3\x08\x79\x77\x5e\x91\x14\x87\xb3\x25\x66\x8b\x25\xa6\x77\x3c\x7b\xd0\x89\x64\xe0\xd1\x34\x57\xfd\x59\x21\x28\x53\xa9\xef\x75\xe5\xa8\x2b\x5f\x56\x71\xe1\xc3\x5f\x12\x84\x5d\xf9\x52\x6c\x94\x8b\xba\xf2\xa8\x80\x3f\x48\x1d\x29\x51\x92\xa3\x8c\xc7\xd1\x1b\xe0\xe5\x23\x45\x73\xf2\x2e\xd4\x8b\xba\xd2\x58\x0d\x9a\x80\xc3\xa8\x17\x70\x6c\xf5\x02\x4c\xb1\x8f\x70\xb1\x5f\x98\x23\xac\x97\xf6\xd8\xf4\xba\x14\x59\xff\x9d\x92\x88\xcb\x07\x32\xc6\x05\x69\x8d\x1f\x00\x03\x5c\x9a\x90\x94\x08\x04\xa2\xda\xab\x08\xd2\x11\x21\x60\x54\x41\x62\x7e\x4e\x84\x1f\xbc\xa8\x91\xe7\x22\xc4\x68\x66\x48\x96\x35\x00\xda\x43\x7b\x03\x26\x19\x97\xc4\x92\x07\x6d\x76\xa7\xc0\x8c\xc6\x3e\x04\x02\x0d\xac\x1a\x49\x86\x90\x64\x66\xee\x4a\x33\xc7\xf0\xb6\x1c\xc3\x66\x8e\x1a\xd5\x20\x60\x2b\x1f\x7e\x63\xce\x18\x89\x15\xe5\xac\x57\xcd\x03\xfe\x00\xdf\xf9\x5e\x7e\x09\xaf\x5b\x0f\x25\x92\x05\xc6\x2d\x87\x03\xb6\xd2\xae\x5a\xf9\xfa\x33\xa2\xac\x83\x27\x9c\x31\xa9\x85\xb5\x40\x70\x13\x13\xae\x44\x8b\x09\x00\x30\x05\x51\xa5\x60\x68\xbf\x41\xfb\x3e\x0c\x51\x0c\x32\xa0\x64\x6e\xed\x7e\xa0\x30\x34\xcb\x45\xe5\xf3\xfa\x01\x6a\xb6\x6f\x33\x57\xb1\xbe\xdd\x69\x67\xb1\x51\x46\xb3\x5b\x0a\xb6\x4f\xa3\x5d\xaf\x7a\xd5\x6e\x28\x67\x43\xff\x5b\x4d\x09\xcc\x24\xd6\x13\x23\xa9\xb0\x50\xb6\xec\xe9\xc5\x98\x2c\x28\xf3\x03\xe4\xeb\xcb\x7c\x7a\xd1\x33\xb5\x8d\x35\x0f\x87\xb2\x64\xd7\x59\xfd\x1b\x00\x00\xff\xff\xf5\xe3\xf6\x67\xc1\x06\x00\x00")

func assetsTplInitTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplInitTpl,
		"assets/tpl/init.tpl",
	)
}

func assetsTplInitTpl() (*asset, error) {
	bytes, err := assetsTplInitTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/init.tpl", size: 1729, mode: os.FileMode(511), modTime: time.Unix(1585821978, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplMarkdownTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xc1\x6a\xea\x40\x14\x86\xf7\x81\xbc\xc3\x81\xb8\x50\xb8\xc9\x03\x08\xf7\x6e\xae\x1b\xb9\x17\xeb\x42\xba\x11\x17\xb1\x9e\x16\x69\x92\x96\x68\xa0\x61\x66\xc0\x45\xa1\x85\xd2\xd6\x45\xc1\xac\x0a\x05\x11\xbb\xa8\x52\xda\x82\x98\x3e\x8e\x19\xf5\x2d\x4a\x66\x9c\xd4\x56\x9a\xc5\x84\xf9\xff\xc3\xf9\x4f\xbe\x13\xc3\x80\xd5\xc3\x98\xf7\x62\x3e\x3a\xd7\x35\x5d\xa3\xc9\xfc\x36\xb9\x1c\xd0\x54\x4d\xfa\xd7\x40\x61\x35\x7d\xe5\xd1\x0d\x50\x48\x86\x17\xfc\x65\x0c\x54\xd7\x68\xd1\x34\x4d\x71\xa8\x13\xe4\x4b\xd7\x08\xf1\x6d\xef\x08\xc1\xaa\xd9\x4d\x07\xff\xb7\x3b\x5d\xc6\x28\x10\x62\x95\xbd\x16\x9e\x31\x46\xeb\xe9\x45\x98\x15\xdb\x45\xc6\x1a\x79\xe3\xd3\xfd\x6a\x15\x40\x3e\x94\x10\xeb\xef\x89\xeb\xa2\x27\x9a\x89\x14\xf4\x5a\x8c\xa5\x03\xab\xc0\xdc\x31\x86\xbf\x20\xd7\xee\xa2\x0b\xc5\xdf\x60\x95\xb0\x73\x20\xe3\x75\xcd\x30\x0c\x20\x44\x78\x2a\xc9\x52\xf7\xad\x3c\x5d\xfb\x93\x95\x65\x79\x69\x86\x29\x68\x3c\x0d\xf8\xe4\x4d\xd2\x90\xa4\x84\x00\x14\x96\xcf\x71\x72\x7f\x05\x14\x78\x34\x4d\xfa\xa3\xc5\x6c\xbe\x7c\x9c\x53\x58\xc7\xd1\x6a\x32\x4c\x7a\xef\x99\xc3\xa3\xe9\x62\x16\xaf\xef\x26\xbb\x58\x15\x55\x73\x97\xed\x37\x61\x0b\xb2\x1c\x75\x03\x59\x40\x72\x02\xd7\x93\x1f\x03\x20\xb0\x4b\xa9\x16\x9e\x62\x25\x70\x9b\xe8\x33\x26\xf5\x72\xa7\x12\x38\xce\x66\x37\x25\x3c\xb4\x03\xa7\xbb\x6f\x3b\x01\xaa\x82\xaa\xdf\x76\x6d\x3f\xfc\x87\xa1\x52\x64\xab\x1f\x16\x51\xaf\xed\x55\x1b\x79\x23\xfb\x97\x0a\x99\xf7\x11\x00\x00\xff\xff\x54\x04\xaf\xad\x62\x02\x00\x00")

func assetsTplMarkdownTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplMarkdownTpl,
		"assets/tpl/markdown.tpl",
	)
}

func assetsTplMarkdownTpl() (*asset, error) {
	bytes, err := assetsTplMarkdownTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/markdown.tpl", size: 610, mode: os.FileMode(511), modTime: time.Unix(1584588363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplTablesTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xe5\x4a\xce\xcf\x2b\x2e\x51\xd0\xe0\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x50\xc9\x2c\x49\xcd\x55\xb0\xb2\x55\xd0\xab\xad\x05\xc9\x80\xf9\x7a\xa1\x05\x05\xa9\x45\x21\x89\x49\x39\xa9\x7e\x89\xb9\xa9\xb5\xb5\x0a\x0a\x0a\x0a\xb6\x0a\x4a\x30\x69\x24\x19\x25\x05\x7d\x7d\x05\x98\xb8\x73\x7e\x6e\x6e\x6a\x5e\x49\x6d\x6d\x75\x75\x6a\x5e\x0a\xc8\x40\x4d\x40\x00\x00\x00\xff\xff\xf6\x4d\x87\xcf\x77\x00\x00\x00")

func assetsTplTablesTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplTablesTpl,
		"assets/tpl/tables.tpl",
	)
}

func assetsTplTablesTpl() (*asset, error) {
	bytes, err := assetsTplTablesTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/tables.tpl", size: 119, mode: os.FileMode(511), modTime: time.Unix(1584588363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/tpl/curd.tpl":     assetsTplCurdTpl,
	"assets/tpl/e.tpl":        assetsTplETpl,
	"assets/tpl/entity.tpl":   assetsTplEntityTpl,
	"assets/tpl/example.tpl":  assetsTplExampleTpl,
	"assets/tpl/init.tpl":     assetsTplInitTpl,
	"assets/tpl/markdown.tpl": assetsTplMarkdownTpl,
	"assets/tpl/tables.tpl":   assetsTplTablesTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"tpl": &bintree{nil, map[string]*bintree{
			"curd.tpl":     &bintree{assetsTplCurdTpl, map[string]*bintree{}},
			"e.tpl":        &bintree{assetsTplETpl, map[string]*bintree{}},
			"entity.tpl":   &bintree{assetsTplEntityTpl, map[string]*bintree{}},
			"example.tpl":  &bintree{assetsTplExampleTpl, map[string]*bintree{}},
			"init.tpl":     &bintree{assetsTplInitTpl, map[string]*bintree{}},
			"markdown.tpl": &bintree{assetsTplMarkdownTpl, map[string]*bintree{}},
			"tables.tpl":   &bintree{assetsTplTablesTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
