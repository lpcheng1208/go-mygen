// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// tpl/curd.tpl
// tpl/entity.tpl
// tpl/example.tpl
// tpl/markdown.tpl
// tpl/tables.tpl
package gomygen

import (
	"os"
	"reflect"
	"testing"
)

func Test_bindataRead(t *testing.T) {
	type args struct {
		path string
		name string
	}
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := bindataRead(tt.args.path, tt.args.name)
			if (err != nil) != tt.wantErr {
				t.Errorf("bindataRead() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("bindataRead() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_tplCurdTpl(t *testing.T) {
	tests := []struct {
		name    string
		want    *asset
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tplCurdTpl()
			if (err != nil) != tt.wantErr {
				t.Errorf("tplCurdTpl() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("tplCurdTpl() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_tplEntityTpl(t *testing.T) {
	tests := []struct {
		name    string
		want    *asset
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tplEntityTpl()
			if (err != nil) != tt.wantErr {
				t.Errorf("tplEntityTpl() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("tplEntityTpl() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_tplExampleTpl(t *testing.T) {
	tests := []struct {
		name    string
		want    *asset
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tplExampleTpl()
			if (err != nil) != tt.wantErr {
				t.Errorf("tplExampleTpl() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("tplExampleTpl() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_tplMarkdownTpl(t *testing.T) {
	tests := []struct {
		name    string
		want    *asset
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tplMarkdownTpl()
			if (err != nil) != tt.wantErr {
				t.Errorf("tplMarkdownTpl() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("tplMarkdownTpl() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_tplTablesTpl(t *testing.T) {
	tests := []struct {
		name    string
		want    *asset
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tplTablesTpl()
			if (err != nil) != tt.wantErr {
				t.Errorf("tplTablesTpl() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("tplTablesTpl() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestAsset(t *testing.T) {
	type args struct {
		name string
	}
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := Asset(tt.args.name)
			if (err != nil) != tt.wantErr {
				t.Errorf("Asset() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Asset() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMustAsset(t *testing.T) {
	type args struct {
		name string
	}
	tests := []struct {
		name string
		args args
		want []byte
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := MustAsset(tt.args.name); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MustAsset() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestAssetInfo(t *testing.T) {
	type args struct {
		name string
	}
	tests := []struct {
		name    string
		args    args
		want    os.FileInfo
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := AssetInfo(tt.args.name)
			if (err != nil) != tt.wantErr {
				t.Errorf("AssetInfo() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("AssetInfo() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestAssetNames(t *testing.T) {
	tests := []struct {
		name string
		want []string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := AssetNames(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("AssetNames() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestAssetDir(t *testing.T) {
	type args struct {
		name string
	}
	tests := []struct {
		name    string
		args    args
		want    []string
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := AssetDir(tt.args.name)
			if (err != nil) != tt.wantErr {
				t.Errorf("AssetDir() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("AssetDir() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestRestoreAsset(t *testing.T) {
	type args struct {
		dir  string
		name string
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if err := RestoreAsset(tt.args.dir, tt.args.name); (err != nil) != tt.wantErr {
				t.Errorf("RestoreAsset() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestRestoreAssets(t *testing.T) {
	type args struct {
		dir  string
		name string
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if err := RestoreAssets(tt.args.dir, tt.args.name); (err != nil) != tt.wantErr {
				t.Errorf("RestoreAssets() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func Test_filePath(t *testing.T) {
	type args struct {
		dir  string
		name string
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := _filePath(tt.args.dir, tt.args.name); got != tt.want {
				t.Errorf("_filePath() = %v, want %v", got, tt.want)
			}
		})
	}
}
