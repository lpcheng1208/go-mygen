// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/tpl/curd.tpl
// assets/tpl/entity.tpl
// assets/tpl/example.tpl
// assets/tpl/markdown.tpl
// assets/tpl/tables.tpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTplCurdTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\x5d\x6b\xe3\x46\x17\xbe\x17\xe8\x3f\x9c\x15\xcb\x22\x6d\xcc\x78\x5f\x78\xe9\x45\xc0\x2d\x89\xad\x74\x4d\x13\x27\xb5\x95\x96\xb2\x2c\x45\xb6\x8e\x83\x88\x34\x72\x46\xa3\x7c\x20\x06\x5a\xe8\xcd\x42\xb7\xbd\xda\x14\xb6\xa5\x25\x4b\x0b\xbd\xe9\x6e\x2e\x5a\x7a\xd9\x3f\xd3\xb8\xf9\x19\x65\x46\x8a\x2d\xdb\x71\x2c\x87\x14\xb6\xf4\x22\x04\x8f\x46\xcf\x73\xbe\x9e\x73\x8e\xf8\xc9\x00\x21\x4d\x49\x87\xb3\xa4\xc7\x1d\xb7\x1b\x60\xcb\x0d\x51\x88\xad\xc8\xc3\x00\x62\x75\x0c\xa9\xae\x35\xd6\xe1\x61\x7c\x10\x90\xc6\xba\xae\x09\x5d\xd3\xb5\x7e\x42\x7b\xd0\xc2\xa3\xeb\x5e\x36\xbd\xee\xd5\x6d\x0b\x1e\xce\x87\x4f\x75\x8d\x21\x4f\x18\x85\x07\x73\x2f\x29\xee\x55\xaf\x5b\x51\xbc\x8a\xba\x5a\x85\xcb\xaf\x7e\xbf\xf8\xfa\x74\xf8\xec\xb3\xe1\x77\xcf\xfe\x7a\xf9\xc5\xe5\xd9\xcf\x17\xbf\x7c\x33\x7c\xfd\x5b\x6e\x97\x19\xde\x40\x6b\xc1\x1e\xf2\x7a\x14\x24\x21\x8d\x4d\x4b\xfa\xe8\xd3\xbd\x82\x2d\x86\x0c\xc8\x5a\x10\x6c\xf8\x18\x78\x9b\x7e\xcc\x85\x00\x63\x9a\xfa\xe2\xc7\x97\x97\x67\x5f\x0e\x5f\x9c\x0f\x9f\xbf\x26\xa5\x59\xdb\xd1\x51\x6c\xc6\x07\x81\x73\xcc\x73\xde\x0a\x0c\x5c\xe6\x86\x31\x10\x42\x7c\xca\x91\xf5\xdd\x1e\xa6\xc2\x02\x93\x45\x47\x71\x1b\xe3\x24\xe0\xf0\xe4\xa9\xc4\xdd\xd9\xdf\xb3\x29\xf7\xf9\x89\x10\xd7\xb1\x54\x00\x19\x93\x7f\x11\xb3\xa4\x37\x07\x09\xb2\x93\xec\x70\xb5\x06\x21\x69\xac\x93\x0f\xe5\x51\xce\x7f\x45\x4c\x08\xb1\x74\xcd\xef\xab\x8b\xf7\x6a\x40\xfd\x42\x5e\x94\xd7\x1e\xf6\x91\x81\x82\x23\xf5\x20\x8a\xd1\xb4\x74\xad\x1f\x5d\x1d\xb5\xf0\x98\x9b\x8a\x91\x45\x47\x92\x6a\xc6\xd4\x56\x12\x04\x33\xe6\xa6\x42\xd7\x24\x65\x2d\x87\xe9\xf4\x5c\x6a\xea\x5a\x9a\x32\x97\xee\x21\xa8\x97\x54\x06\xe2\x26\xed\x47\x42\x3c\x60\xd1\x11\x49\x53\xf2\x38\x09\x07\xb9\xc3\xd5\xaa\xe4\xaa\x47\x61\x88\x94\x0b\x21\x5f\x46\xea\x09\x91\xf9\x23\x1d\xb9\x57\x53\x6e\xa5\xba\xd6\x8b\x28\xf7\x69\x82\xca\xa3\x42\x68\x6b\xe0\x0e\x06\x48\xbd\x42\xb8\x2b\xaa\x1a\x17\x44\x3b\xbd\xc1\xd4\x34\x95\xe1\x3c\x00\xf2\x7e\xe4\x48\x7d\x19\xfd\x20\x72\xf9\x3b\xff\x37\x14\xd4\xd8\x81\xd5\x19\x97\xc8\x46\x76\xb3\x52\xad\xce\x78\x16\xc4\x08\x53\xb8\x3e\x2d\x87\xda\xa4\xe5\x31\xb9\x1f\x22\x71\xfc\x10\x4b\xe0\xca\x6b\x73\x60\x17\xbf\xdc\xc9\xea\x7f\x5e\x12\xf3\x7f\x32\x99\x62\xa2\x1c\x8b\x22\x7c\xfe\x62\x24\xc2\x65\x34\x28\x25\x50\x46\x7f\x79\x8d\xdc\x56\x7c\x93\xba\xcb\x79\x27\x75\xf7\x36\x4b\xa6\x10\xf3\x71\x2c\x6a\x6f\x81\x38\xe0\xbf\xa4\x8e\x1b\xc5\x21\xd5\x30\x2d\x8d\x4f\x87\xdf\xfe\x3a\x3c\x3d\x5f\x46\x15\x1d\xf7\x10\xa7\xc7\xd2\xa1\x1b\x24\x38\xab\x8a\x2e\x74\xa3\x28\x98\x2e\xf7\x98\x87\x7c\x72\xd4\xec\x30\x1c\xb8\xec\x0a\xb5\xd4\x84\x91\x20\xe3\x01\xc3\xf2\x5e\x9c\x83\xaa\x87\xf6\x31\xf6\x4c\x65\xd8\xe2\xa9\x75\xe8\x32\x70\xfb\x7d\xec\xf1\x7a\x94\x50\x0e\xaa\x1a\x74\xad\x70\x94\x61\xd7\x20\x63\x22\x72\x36\xaf\xa9\xa7\xe8\x99\x0b\xc0\xbb\x72\x6e\x14\xc0\xdf\x85\x47\xb3\x89\x18\x9e\x9e\x5f\xbc\xfa\xfe\xcf\x3f\xce\x86\x9f\xbf\x29\x97\x87\x3a\x43\x97\x63\xe6\x61\x99\xae\x63\x81\x19\xb8\x31\x6f\x7a\x99\x77\xd3\x59\xe9\x45\x34\xe6\x20\x33\x80\xc7\x52\xb9\x46\xb3\xd5\xb1\xdb\x0e\x34\x5b\xce\x36\x18\xb0\x92\xb7\x1d\x05\xa8\x08\x76\x07\x03\x64\x05\x7c\x58\x01\x03\xcc\x34\x25\x4d\x1a\x23\xe3\x85\x85\xc8\x82\x8f\xd6\x36\x77\xed\x4e\xe1\xe9\x96\xcb\xf6\x85\xb0\x8c\x45\xd5\x80\x77\x5b\x0e\x85\x56\x93\xd9\x91\xb5\x99\xac\x4a\x96\x69\x7e\x73\xcd\xc9\x42\x3c\x55\x2d\x9b\xf2\x30\xe3\x5b\x58\x2d\x33\x85\xb1\xb4\x40\x77\x07\xde\xb2\x85\x71\xbd\x50\x47\xd5\xb0\x5a\x03\x63\x77\xa7\xb1\xe6\xd8\xe5\x2b\xa1\x63\x3b\xa0\x9e\x49\x63\x8a\xdb\xf1\xc7\x8f\xed\xb6\xad\x30\x98\x1f\xba\xec\xe4\x03\x3c\x11\x02\x6a\xf0\x9e\xa1\x6b\xf9\x78\x95\x95\xe0\xee\xa3\xf9\xe4\x69\xa1\x9f\x54\xe0\x91\x35\xce\xdf\x7d\xbf\x02\xf7\x0f\xdd\x40\xde\xcd\x49\x24\xbe\x22\x12\x22\xc7\x19\xed\x6b\xd9\xef\x0a\xa4\xa9\x7c\x47\x25\x31\x4f\xe7\x68\x91\x0f\xc9\xa8\xb1\xe1\xf4\xc2\x3b\xca\xc5\x0f\x3f\x5d\xbe\x79\x55\xdc\xe6\xcb\x65\x64\xc3\xa7\xde\x52\xf9\x60\x18\x4b\x6f\x6e\xb7\xcb\x4f\xa4\xad\x63\x6f\xda\x75\x47\x66\x2d\x24\x13\x5f\x32\x2b\x60\x6c\xb4\xb7\xb7\x4a\x25\x54\x29\x4a\x1a\x74\x55\xd7\x0a\x6b\xf4\x7d\x92\x89\xf4\xae\xb6\xae\x0d\x9f\xc5\x7c\xd9\x68\xdd\x72\xf3\xba\xfb\x50\xa9\xda\xdf\x6c\x6e\x35\x1d\xf8\x9f\x31\xd9\x89\xc6\x61\x2b\xd9\xda\xee\x2a\xa2\xb2\xfd\xfc\xbb\x03\xba\xdd\x6e\xd8\x6d\x58\xff\x04\x9a\x0d\x68\xd8\x9d\xfa\x3f\x1b\xe1\x2c\xbc\x25\xa7\xb0\x1c\xe9\xa6\x05\x66\x6f\xbc\x38\x94\x08\x0a\xd4\xb7\x77\x5b\x8e\xf9\xd0\x82\x25\x44\x38\xff\x3b\x21\x77\x75\x66\xdf\x7f\xa0\xac\x2a\x1f\x84\xbf\x03\x00\x00\xff\xff\x60\x61\x9e\xab\xe2\x11\x00\x00")

func assetsTplCurdTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplCurdTpl,
		"assets/tpl/curd.tpl",
	)
}

func assetsTplCurdTpl() (*asset, error) {
	bytes, err := assetsTplCurdTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/curd.tpl", size: 4578, mode: os.FileMode(438), modTime: time.Unix(1584361681, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplEntityTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x41\x0a\xc2\x40\x0c\x45\xf7\x85\xde\x21\x8b\x2e\xa5\x07\x10\x5c\x09\x5d\x76\x21\xbd\xc0\x68\x83\x54\x67\x3a\x25\x4d\x29\x25\xe4\xee\x12\x75\xa4\x54\xc1\x59\x4d\x5e\xfe\x0f\x2f\xcf\x44\xca\xc6\x9d\x3d\x1e\x63\x08\xd8\xb3\x6a\x9e\xf1\x32\x20\x24\xae\x0a\x23\xd3\x74\x61\x10\x0b\x93\xeb\xaf\x08\xc5\x6d\x07\x45\xc7\x18\x60\x7f\x80\xb2\xea\xd0\xb7\xa3\xaa\xc8\x93\x95\xb5\x0b\x56\x7b\xbd\x04\x9b\x65\x78\xc3\x44\xaa\x48\xc1\x71\x2a\xc3\x26\x7f\xc2\xe0\xe8\x6e\x3a\x22\xd8\xb7\xf6\xd1\x2f\xdb\x7a\xf2\x7e\x6d\x6c\xf3\x1f\x6b\x8a\xf3\x56\x9a\xe2\xbc\x72\x4e\xc0\x4e\x7d\x9c\x61\xb5\xf9\x65\xf6\x08\x00\x00\xff\xff\x6e\x2e\x32\xff\x48\x01\x00\x00")

func assetsTplEntityTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplEntityTpl,
		"assets/tpl/entity.tpl",
	)
}

func assetsTplEntityTpl() (*asset, error) {
	bytes, err := assetsTplEntityTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/entity.tpl", size: 328, mode: os.FileMode(438), modTime: time.Unix(1584357534, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplExampleTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x6d\x6b\xdc\x46\x10\xfe\x2e\xd0\x7f\xd8\x0a\xee\x22\x99\x8b\xe4\xd4\x49\x09\x82\xa3\xed\xbd\x84\x06\x92\xd4\xc5\x2e\xfd\x50\x4a\xd8\x93\xf6\xee\x16\x4b\xbb\xba\xdd\x55\x1a\xd7\x18\x2e\x50\x9a\x84\x24\x76\x20\x4d\x02\xad\xd3\x77\xf7\x85\x42\xed\x0f\xa5\x31\x97\x94\xfe\x19\x4b\x67\xff\x8b\x32\x92\xee\xcd\x38\xc5\xb4\x18\xfa\x6d\x76\x76\x66\x67\xe6\x79\x9e\xd9\x08\x7b\x2b\xb8\x43\x50\xc8\x7d\x12\x48\x5d\xd3\x35\x1a\x46\x5c\x28\x64\xea\x9a\xe1\x63\x85\x5b\x58\x12\x47\xf6\x02\x43\xd7\x8c\x76\xa8\x0c\x5d\xbb\x8e\x8c\x0e\x55\xdd\xb8\x65\x7b\x3c\x74\x3a\xfc\xac\xec\x05\x67\x7d\x41\x6f\x10\xe1\x84\xab\x45\xa8\x22\x52\x51\xd6\x01\x53\x2a\x41\x59\x47\x82\xc9\x88\x72\x62\x01\x01\x16\x94\x52\xab\x11\x41\x8d\x5a\x9d\xb3\x36\xed\x34\x99\xa2\x6a\x15\x49\x25\x62\x4f\xa1\x35\x5d\x7b\x87\x4b\x85\x10\x42\x79\x3e\x72\x9c\x64\x6b\x37\x79\xd6\xd7\xb5\x45\xe8\x0f\x21\x44\x99\x42\x8e\x33\xfc\x75\x27\xd9\xfc\x5e\xd7\xae\xe1\x90\xcc\x84\x0f\x3f\xff\x39\xbd\xf3\x5c\xd7\x16\xb1\x94\xb3\xef\xec\x7c\x36\xfc\xe6\x96\xae\x35\x6a\x79\xce\xe4\x62\xf0\x28\x79\xf8\x40\xd7\xea\x5d\x2c\x24\x51\x53\x4f\xbd\x7c\x92\x65\x2c\xd3\x90\x7c\xc2\x19\x99\xdc\xa4\x4f\xff\x48\xee\x0f\x74\xed\x2a\xbe\x79\xd9\x0f\x48\xd1\x53\xba\xd5\x4f\x7e\xf8\x69\xf8\xcb\xe0\xf0\xe9\xef\x07\x7f\x7d\x95\x6e\x6c\x67\x11\xef\x46\x84\xcd\x44\xe4\x77\xe9\xe3\x5d\x5d\x5b\x07\x40\x1c\x07\x8d\x5d\xe9\x83\xdf\x92\xc1\x23\x5d\x6b\xc7\xcc\x43\x97\x19\x55\x8d\x9a\xe9\xb5\x3b\x47\xf0\xb2\xd0\x9c\xec\x05\x76\xa3\x06\x88\xd1\x76\xd1\x98\xb4\x9b\xbd\x18\x07\x97\x78\xe0\x43\x8e\x3d\xea\xbb\x82\x0c\xc3\x82\xc8\x69\x27\xaa\x22\xe3\xcc\xdb\x92\x62\x67\xa9\x8b\x59\xa7\x8b\xe9\x19\x23\xeb\xc7\x97\x0c\xb9\x55\xd4\x0e\x95\xbd\x14\x09\xca\x54\xdb\x34\x4a\xd2\x2d\xc9\xb7\x94\x17\x99\x60\xf9\x96\x53\x92\x6f\x7a\x39\x5c\xd5\x92\x2c\x47\x60\xc1\xc3\x55\x25\x62\x52\x0e\xb8\x57\xbd\xc2\x3d\x1c\x94\x15\x0d\xc9\x75\xa8\x56\x2d\x49\xa3\x92\x37\x00\xe8\x17\x26\x70\x54\x98\x40\xfb\xc8\xcb\xc5\xc8\xcc\xb9\x2a\x0e\x05\x3f\x15\x5d\x8b\x45\x60\xbf\x17\x13\xb1\xda\x94\x1e\x8e\xc8\xcc\xb0\x56\x25\x93\x99\xc7\x19\x23\x9e\xa2\x9c\x55\x10\x11\x02\x26\x02\xc4\x80\x0b\xd3\xc8\xf5\x5a\x41\xbe\x64\x56\x86\x1f\x44\xbc\x56\x45\x8c\x06\x00\x53\x84\x19\xf5\x4c\x22\x84\x95\x01\x32\x79\xca\x5e\x22\xaa\x20\xb4\xce\x19\x93\x59\xe1\xc2\x61\x1d\x13\x08\xda\x98\x09\x04\x87\xa5\x6b\x82\xa8\x58\x30\x34\x89\xcf\xea\xdc\xc0\x02\x35\x6a\x23\x66\xf3\xf3\xda\x5a\x86\xd7\xfa\x7a\xa3\x85\xe6\xc6\x87\xab\xb0\xb6\xa0\x9c\x4c\x25\x94\x51\x55\x1f\x3f\x65\x8e\x98\x86\x91\x67\x55\x53\x6c\x97\x6b\x04\x40\x4e\x97\x4b\x05\x9c\x00\xdc\xee\xc2\xc2\xfc\xc5\x4a\xbe\x4d\xae\x21\x38\xcf\x6f\xb0\x94\xae\x71\xee\xf5\x85\xf3\x17\xde\x80\x73\xce\x86\x6b\xac\x50\xe6\x07\xc4\x07\x57\xc1\x89\x6b\xc4\xaa\x7d\x31\x6c\x9d\x07\x5f\x01\x88\x7b\x6e\xbe\x32\xde\x10\x17\x5d\xa8\x64\x43\x36\x6a\xa8\x3a\xa5\x6b\x4b\xd7\xa6\x47\xac\xa2\x6b\xe4\xe3\xb1\xc3\x6c\xd4\xac\xc9\x8a\xa4\x5f\x6f\x1f\xec\x7c\x97\xde\xed\xa7\x5b\x77\x87\x5f\x7c\x9a\xef\x4a\x01\xc1\x32\x91\x6a\x9c\x76\x89\x32\xff\x83\x2e\x11\xc4\x54\x68\xae\xf8\x91\xec\xe5\x0c\x96\xa3\x50\xe9\x5a\x8b\xf3\x15\x40\x6a\x9c\xbd\x06\xc5\x14\xf7\x79\x56\x59\x10\x19\x07\x6a\x2c\xa1\xa9\x5e\x6d\x28\x63\x96\x21\xdf\x82\x4f\xe4\xf6\x9f\xe9\xe3\xdd\xc3\xdb\xf7\x0f\xb7\xfa\x07\x3f\xde\x4a\xef\xbd\x4c\x37\xb6\xf7\xf7\xfa\xfb\x7b\xf7\x64\x2f\x38\x46\x64\xca\x6e\x0a\xc1\xc5\x44\x66\xb0\x70\x8b\xb0\x6f\x01\x33\xf3\xb2\x1f\xce\x7f\x94\x5f\xc1\x07\xb1\xf1\x3c\xd9\x7c\x02\xff\xc7\xc3\x8d\xfd\xbd\x7e\xfa\xec\xdb\x57\x03\x70\x05\x4b\x75\x92\xd9\xff\x71\x38\x21\x95\xc9\x68\x70\xdc\x7e\x9c\xa0\xf5\xa3\x7d\xf7\x5f\x64\xe8\x6c\x1e\xd7\x6e\x9d\xc7\xec\x7f\xd3\x6f\x72\xe7\xcb\xe4\xc5\xe0\xd5\xd8\xd6\x05\xc1\xea\x44\xca\xf2\xfd\x7f\xa7\xab\xa2\x42\xd9\xf7\x4f\x69\x96\xe6\x4d\x1c\x46\x01\x79\x3f\xf2\x4f\x79\x92\xa2\xc2\x7f\x9b\xe4\xef\x00\x00\x00\xff\xff\xf2\x54\x6c\x30\xab\x08\x00\x00")

func assetsTplExampleTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplExampleTpl,
		"assets/tpl/example.tpl",
	)
}

func assetsTplExampleTpl() (*asset, error) {
	bytes, err := assetsTplExampleTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/example.tpl", size: 2219, mode: os.FileMode(438), modTime: time.Unix(1584357858, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplMarkdownTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xc1\x6a\xea\x40\x14\x86\xf7\x81\xbc\xc3\x81\xb8\x50\xb8\xc9\x03\x08\xf7\x6e\xae\x1b\xb9\x17\xeb\x42\xba\x11\x17\xb1\x9e\x16\x69\x92\x96\x68\xa0\x61\x66\xc0\x45\xa1\x85\xd2\xd6\x45\xc1\xac\x0a\x05\x11\xbb\xa8\x52\xda\x82\x98\x3e\x8e\x19\xf5\x2d\x4a\x66\x9c\xd4\x56\x9a\xc5\x84\xf9\xff\xc3\xf9\x4f\xbe\x13\xc3\x80\xd5\xc3\x98\xf7\x62\x3e\x3a\xd7\x35\x5d\xa3\xc9\xfc\x36\xb9\x1c\xd0\x54\x4d\xfa\xd7\x40\x61\x35\x7d\xe5\xd1\x0d\x50\x48\x86\x17\xfc\x65\x0c\x54\xd7\x68\xd1\x34\x4d\x71\xa8\x13\xe4\x4b\xd7\x08\xf1\x6d\xef\x08\xc1\xaa\xd9\x4d\x07\xff\xb7\x3b\x5d\xc6\x28\x10\x62\x95\xbd\x16\x9e\x31\x46\xeb\xe9\x45\x98\x15\xdb\x45\xc6\x1a\x79\xe3\xd3\xfd\x6a\x15\x40\x3e\x94\x10\xeb\xef\x89\xeb\xa2\x27\x9a\x89\x14\xf4\x5a\x8c\xa5\x03\xab\xc0\xdc\x31\x86\xbf\x20\xd7\xee\xa2\x0b\xc5\xdf\x60\x95\xb0\x73\x20\xe3\x75\xcd\x30\x0c\x20\x44\x78\x2a\xc9\x52\xf7\xad\x3c\x5d\xfb\x93\x95\x65\x79\x69\x86\x29\x68\x3c\x0d\xf8\xe4\x4d\xd2\x90\xa4\x84\x00\x14\x96\xcf\x71\x72\x7f\x05\x14\x78\x34\x4d\xfa\xa3\xc5\x6c\xbe\x7c\x9c\x53\x58\xc7\xd1\x6a\x32\x4c\x7a\xef\x99\xc3\xa3\xe9\x62\x16\xaf\xef\x26\xbb\x58\x15\x55\x73\x97\xed\x37\x61\x0b\xb2\x1c\x75\x03\x59\x40\x72\x02\xd7\x93\x1f\x03\x20\xb0\x4b\xa9\x16\x9e\x62\x25\x70\x9b\xe8\x33\x26\xf5\x72\xa7\x12\x38\xce\x66\x37\x25\x3c\xb4\x03\xa7\xbb\x6f\x3b\x01\xaa\x82\xaa\xdf\x76\x6d\x3f\xfc\x87\xa1\x52\x64\xab\x1f\x16\x51\xaf\xed\x55\x1b\x79\x23\xfb\x97\x0a\x99\xf7\x11\x00\x00\xff\xff\x54\x04\xaf\xad\x62\x02\x00\x00")

func assetsTplMarkdownTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplMarkdownTpl,
		"assets/tpl/markdown.tpl",
	)
}

func assetsTplMarkdownTpl() (*asset, error) {
	bytes, err := assetsTplMarkdownTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/markdown.tpl", size: 610, mode: os.FileMode(438), modTime: time.Unix(1584357534, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplTablesTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xe5\x4a\xce\xcf\x2b\x2e\x51\xd0\xe0\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x50\xc9\x2c\x49\xcd\x55\xb0\xb2\x55\xd0\xab\xad\x05\xc9\x80\xf9\x7a\xa1\x05\x05\xa9\x45\x21\x89\x49\x39\xa9\x7e\x89\xb9\xa9\xb5\xb5\x0a\x0a\x0a\x0a\xb6\x0a\x4a\x30\x69\x24\x19\x25\x05\x7d\x7d\x05\x98\xb8\x73\x7e\x6e\x6e\x6a\x5e\x49\x6d\x6d\x75\x75\x6a\x5e\x0a\xc8\x40\x4d\x40\x00\x00\x00\xff\xff\xf6\x4d\x87\xcf\x77\x00\x00\x00")

func assetsTplTablesTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplTablesTpl,
		"assets/tpl/tables.tpl",
	)
}

func assetsTplTablesTpl() (*asset, error) {
	bytes, err := assetsTplTablesTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/tables.tpl", size: 119, mode: os.FileMode(438), modTime: time.Unix(1584357858, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/tpl/curd.tpl":     assetsTplCurdTpl,
	"assets/tpl/entity.tpl":   assetsTplEntityTpl,
	"assets/tpl/example.tpl":  assetsTplExampleTpl,
	"assets/tpl/markdown.tpl": assetsTplMarkdownTpl,
	"assets/tpl/tables.tpl":   assetsTplTablesTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"tpl": &bintree{nil, map[string]*bintree{
			"curd.tpl":     &bintree{assetsTplCurdTpl, map[string]*bintree{}},
			"entity.tpl":   &bintree{assetsTplEntityTpl, map[string]*bintree{}},
			"example.tpl":  &bintree{assetsTplExampleTpl, map[string]*bintree{}},
			"markdown.tpl": &bintree{assetsTplMarkdownTpl, map[string]*bintree{}},
			"tables.tpl":   &bintree{assetsTplTablesTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
