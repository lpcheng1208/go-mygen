// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/tpl/curd.tpl
// assets/tpl/e.tpl
// assets/tpl/entity.tpl
// assets/tpl/example.tpl
// assets/tpl/init.tpl
// assets/tpl/markdown.tpl
// assets/tpl/tables.tpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTplCurdTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5d\x6b\xdb\xd6\x1b\xbf\x96\xc1\xdf\xe1\xf9\x8b\x62\xa4\xd6\x28\xf9\xb7\x63\x17\x19\xee\x88\x6d\x65\x35\x4b\x9c\xce\x76\x36\x46\x29\x43\xb6\x8e\x33\x11\xbd\x38\x47\x47\x71\x82\x38\xd0\xc1\x2e\x56\x58\xbb\xde\x34\x2b\x5d\xd9\x68\xe9\x46\x19\xf4\xe5\x62\x63\xbd\xdb\x97\x89\xb5\x7c\x8c\x71\x8e\x64\x5b\xb6\xec\x58\x72\xc2\xe8\x60\x85\x12\x74\xa4\xf3\xbc\xfc\x9e\xdf\xf3\x66\x72\xd4\x43\xe0\xfb\x4a\x93\x60\xaf\x43\x5a\x5a\xdb\x44\x75\xcd\x42\x94\x6e\x39\x3a\x32\xc1\xe5\xc7\xe0\xe7\x73\x6a\x3e\x57\x2d\xc3\x65\x77\xdf\x54\xaa\xe5\x7c\x8e\xe6\x73\xf9\x5c\xd7\xb3\x3b\x50\x47\xfd\x59\xf7\x25\xbd\x0d\x8a\xa2\x44\x17\x64\xb8\x3c\x5f\x89\x9f\xcf\x19\x5d\x30\x91\x2d\xe9\x6d\x19\xae\xc3\x2a\x3b\x01\x00\xc0\x88\x78\xd8\x86\xc2\xdc\xab\xd1\x77\xec\x5f\xb5\xbc\x06\x7a\xfb\xd6\xea\xed\x62\x78\x46\xb9\x8d\x69\x25\xb0\xdb\x96\xe6\x12\x84\xab\xe5\x22\xbf\xc9\x1d\x5c\x59\x81\xd3\xfb\x7f\x0c\xbe\x3b\x0e\xee\xde\x09\x9e\xdc\xfd\xeb\xf1\xd7\xa7\x4f\x5f\x0c\x5e\x7e\x1f\xbc\xfa\x3d\xf2\x5e\xb2\xce\xf0\x4c\x86\x5d\x44\x2a\x8e\xe9\x59\xb6\x2b\xc9\x0c\x4c\xc3\xde\x65\xce\x45\x66\x89\x0c\xf9\x75\xd3\xdc\x30\x90\xa9\x6f\x1a\x2e\xa1\x14\xc4\x69\xd5\x83\xe7\x8f\x4f\x9f\x7e\x1b\x3c\x7c\x13\xdc\x7b\xa5\xa4\xd6\xda\x70\xfa\xae\xe4\xee\x9b\xad\x43\x12\xe9\x2d\x42\x4f\xc3\x9a\xe5\xb2\xa8\x18\x36\x41\xb8\xab\x75\x90\x4f\x65\x90\xb0\xd3\x77\x1b\xc8\xf5\x4c\x02\xb7\x6e\x33\xb9\x37\xf7\x76\x55\x9b\x18\xe4\x88\xd2\x59\x5a\x8a\x80\x30\x66\xff\x1d\x2c\x33\x6f\xf6\x3d\x84\x8f\xc2\xc3\xb5\x12\x58\x4a\xb5\xac\x7c\xc2\x8e\x22\xfd\x43\xc5\x8a\xa2\xc8\x3c\xd2\xec\xc3\xff\x95\xc0\x36\x78\xe8\xd9\x13\xbb\xa5\x2a\x4d\xa2\x75\xf6\x24\x84\xb1\x3c\x44\x88\x63\xa1\xa3\x2e\xc2\xc0\x95\x28\x15\xd3\x71\x91\x24\xe7\x73\x5d\x67\x78\x54\x47\x87\x44\xe2\x76\x60\xa7\xcf\x0c\x48\x38\x50\xf7\x4c\x33\xe1\x84\x4f\x87\xaa\x43\x31\xcd\x8e\x66\x4b\xf9\x9c\xef\x63\xcd\xde\x45\xc0\x2f\xf1\xb8\xb8\x35\xbb\xeb\x50\x5a\xc0\x4e\x5f\xf1\x7d\xe5\x86\x67\xf5\x22\x18\x56\x56\x98\xae\x8a\x63\x59\xc8\x26\x94\xb2\xcb\xc8\xd6\x29\x4d\x78\x59\x28\xc0\xf0\x91\xa5\x83\x8a\x71\xdd\x61\x01\x1a\xf2\x7c\x36\x04\xe3\x0c\x08\xa9\x3c\x8e\x52\x09\xb4\x5e\x0f\xd9\x7a\x2c\x72\x45\xce\xf1\x05\x81\xf3\xcf\xf0\xcf\xf7\x99\xcd\xfb\xa0\x7c\xe4\xb4\x58\x4d\x10\xbb\xa6\xa3\x91\xf7\xdf\x13\xb9\xa8\xb1\xd7\x6b\x09\x1c\x94\x8d\xf0\xcb\x99\x78\x98\x2e\x82\x29\xc1\x86\x9d\x4e\x6c\xcd\xce\x20\x94\x18\x16\x52\x5a\x86\x85\x52\x08\x66\x9f\x65\x30\xf6\xda\xd5\x74\xc6\x5e\xbb\x3a\x4f\xe8\xe2\xeb\xcd\x30\x45\xe7\x31\x2a\xfa\xc3\x98\x45\x27\x72\x23\x5e\x27\xee\x3d\x1c\xd5\x89\x2c\x65\x82\x67\x29\x4a\x57\x26\x22\xfe\x2d\x5b\x23\x26\xcb\x43\x4c\xf7\x64\x89\x78\x27\xf3\x38\x91\xb8\x0b\xeb\xd6\x18\xaf\xd2\x3b\x90\x9c\xf0\x5f\x76\x9e\x3f\x3b\xcf\x4c\xce\x64\x62\x7e\x11\xfc\xf0\x5b\x70\xfc\x26\x4b\x4e\x36\xb5\x03\x34\xdd\xb7\x0f\x34\xd3\x43\xc9\x7c\x6c\x43\xdb\x71\xcc\xe9\x44\x73\x89\x45\x26\x7b\xf1\x4d\x8c\x7a\x1a\x1e\x4a\x3d\x47\x0b\x66\xa2\xc7\x1d\x18\x47\x7d\x27\x52\xc5\x5f\xaa\x87\xa8\x23\x71\x73\x97\x6d\xf6\x07\x1a\x06\xad\xdb\x45\x1d\x52\x71\x3c\x9b\x00\xa7\x63\x3e\x17\x3b\x2a\x46\xed\x32\xd4\xaf\xb0\x74\x5c\xe7\x6f\x91\x2e\x2d\xa5\xb2\xcd\xfa\x69\x4c\xe5\x75\x58\x4d\x86\x32\x38\x7e\x33\x78\xf6\xe3\xc9\x9f\x4f\x83\xaf\x5e\xa7\x8b\x64\x05\x23\x8d\xa0\x10\x8d\x34\x15\x53\x06\xc9\xd4\x5c\x52\xd3\x43\x9f\xa7\xe3\xda\x71\x6c\x97\xc0\xb0\x56\x97\x40\xac\xd5\x9b\x6a\xa3\x05\xb5\x7a\x6b\x1b\x44\xb8\x12\x95\x4b\x2e\x90\x2b\xd8\xe9\xf5\x10\x8e\xc9\x87\x2b\x20\x82\xe4\xfb\x4a\xcd\x76\x11\x26\xb1\x99\x53\x86\x4f\xd7\x37\x77\xd4\x66\xec\xed\x96\x86\xf7\x28\x95\xc5\x45\x7c\x42\xff\x04\xa1\x62\x85\x31\xb4\x2e\x2c\x8a\x21\xcf\x96\x1c\xc9\xd2\x18\x19\x86\x63\x8a\x6f\x9b\xec\x30\xb4\x62\x49\xbe\x25\xa8\x95\xb9\x48\xec\xf4\xf4\xac\xd4\x9a\x5d\x2c\x46\x7c\x5a\x2b\x81\xb8\x73\xb3\xba\xde\x52\xd3\x73\xa9\xa9\xb6\x80\xbf\x63\xc6\xc4\x57\x98\xcf\x6e\xa8\x0d\x95\xcb\xc0\x86\xa5\xe1\xa3\x8f\xd1\x11\xa5\x50\x82\x0f\xc5\x7c\x2e\x1a\x2e\x18\x97\xb4\x3d\x24\xdd\xba\x1d\xab\x69\x45\x58\x95\xc7\xb1\xbe\x64\x14\xe1\xd2\x81\x66\xb2\x6f\x23\x25\x4c\x3e\x57\x44\x69\x24\x67\x34\x09\x87\xcf\x45\xf0\x7d\x76\x87\x07\x3c\x0a\xfd\x68\xdb\xb2\x94\x51\x71\x4d\x8c\x1c\xa3\x58\xfc\xf4\xf3\xe9\xeb\x67\xf1\x95\x2b\x5d\x44\x36\x0c\x5b\xcf\x14\x0f\x8c\x5c\xe6\xcd\x72\x0b\xd7\x44\xd8\x9a\xea\xa6\x5a\x69\xb1\xa8\x59\xca\xc4\xba\x79\x05\xc4\x8d\xc6\xf6\x56\xaa\x80\xf2\xec\x63\x06\x15\x47\xcb\x48\x7c\x89\x0c\xd3\xfc\xa2\xe6\xce\x0d\x03\xbb\x24\x2b\x5a\x4b\xce\x9d\x17\x0f\x15\xe7\xfe\x66\x6d\xab\xd6\x82\xff\x8b\x93\x55\x6b\x0c\xdb\x42\xd4\x82\x27\x77\x06\x0f\xee\x9f\xbc\xbd\x93\x11\x3b\x56\x7e\xfe\xdd\xd0\x6d\x37\xaa\x6a\x03\xca\x9f\x43\xad\x0a\x55\xb5\x59\x39\x3f\x96\x83\x7b\x0f\x4f\xde\xfe\x9a\x05\xc5\x6d\x1b\x49\x9e\x8b\xf0\xb0\xd9\x8e\x71\x9a\xd9\x7b\x85\x24\x12\x60\xe8\x90\xcd\xef\xfe\x97\x08\x23\x30\xf4\x12\x2b\x83\x02\xdb\xdc\xcf\x58\x87\x42\xe3\xe4\x7c\x4e\x88\xfa\x4b\x09\xd8\x8d\x70\xbb\x29\x84\xb6\xca\x1f\x4c\x75\x1e\x61\xfe\x6f\x09\x82\x30\x84\x4e\xa0\x4c\xfb\x4c\x1c\x43\x2a\xa6\x9c\x6e\xd8\xa8\x24\xc9\x20\x75\xc6\x63\x5a\x0a\x02\x41\x65\x7b\xa7\xde\x92\x2e\xcb\xe9\xc1\x5b\xb4\x3b\xca\x33\xf6\xbf\x02\xb7\xea\x42\xba\xf3\xe0\x9b\xe7\xc1\xf1\xcb\xe0\xd1\xeb\xc1\x83\x5f\x06\x2f\x1f\x0d\x9e\xbc\x48\x07\x90\x7a\x68\xb8\xc4\x95\x8c\x31\xc3\x66\xb7\xe0\x59\xdc\xca\x0e\xd2\x04\xc3\xa2\x56\x2b\x2c\xda\xb9\x0d\x4e\x30\x36\x71\x77\xe2\xb3\xb6\x30\x1f\x4e\x21\x81\x67\x7a\xce\x19\xdd\x48\x4d\xf4\x03\xaf\x20\xb0\xc1\x9b\x60\x0f\xcd\xa7\xe7\xdf\x01\x00\x00\xff\xff\xbb\x3d\xac\xe1\x9e\x16\x00\x00")

func assetsTplCurdTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplCurdTpl,
		"assets/tpl/curd.tpl",
	)
}

func assetsTplCurdTpl() (*asset, error) {
	bytes, err := assetsTplCurdTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/curd.tpl", size: 5790, mode: os.FileMode(511), modTime: time.Unix(1585656082, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplETpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\xc1\x6b\xd4\x4e\x14\xc7\xcf\x3b\x30\xff\xc3\x63\x4f\x09\x84\xc9\xbd\x3f\x7e\x27\x5d\x6f\xf6\xa0\x82\xe7\x49\x7c\xc9\x86\x66\x33\xdb\x37\x13\xaa\x94\x3d\x28\x4b\x59\x41\xa1\x07\x95\x6e\x4f\x15\x4a\xc1\x83\x8d\xc7\x55\x2a\xfe\x33\x3b\xd9\xf6\xe4\xbf\x20\x93\x6c\xdc\x56\x45\x41\xf0\x14\xde\x37\xdf\x99\xf7\xf9\xc0\x64\xa3\xb1\x22\x03\x1e\x67\xbd\xfe\x23\x69\x64\x24\x35\x86\x7a\x37\xef\x73\xe6\xa2\x34\x33\xc3\x32\x12\xb1\x1a\x85\xe3\x9d\x34\x44\x22\x45\xba\xcf\x99\xef\x7e\x87\x21\xd8\x8b\x67\x76\xb1\xb0\xe7\xc7\xcb\x8f\xcf\x39\x33\x4f\xc6\x08\x03\xd0\x86\xca\xd8\xc0\x3e\x67\x93\x75\xed\xf2\xfc\x83\xfd\xfc\xda\x9e\x1c\xd4\x27\x33\xce\x92\xb2\x88\xc1\x43\x18\xf8\x70\xdf\xc8\x78\xc7\x43\x22\x68\xae\xf6\xdb\x8f\x3b\xda\xcb\x12\x88\x02\x40\x84\xad\xff\x01\x45\xa6\xb7\xcb\x3c\x77\x4d\xff\x3f\x88\x9a\x42\x8f\xd0\x94\x54\x00\x22\x67\xbd\x09\x60\xae\xf1\x66\xde\xc0\x8a\x87\x99\x19\xae\xd7\xa0\xef\x9a\x1b\xac\x16\xe8\x6a\x3e\xb5\x8b\xb3\xe5\x97\xb7\xf5\xd3\xea\x67\xb8\xbb\x3a\xdd\xf0\x05\x30\xd2\xa9\xf3\xcb\x8a\xf4\xef\x58\x89\x7e\x0f\x4b\x72\xec\x21\x36\x7b\xfe\x08\x0b\x89\xa2\x91\x34\xbf\x64\xbe\x73\x1d\xba\xed\xad\xb9\x03\x90\x94\x6a\x10\x42\x64\x85\x41\x4a\x64\x8c\xfb\x93\x7f\x26\x93\x34\x36\x2d\x40\xbb\x59\x08\xf1\xa3\xd9\xec\xb4\x7e\xf3\xbe\x3e\xaa\xec\xe1\x59\x7d\x54\xad\xde\x7d\x5a\x1d\x4f\xaf\x5e\xcd\x2f\xab\xea\xeb\xc5\x0b\x3b\x9b\x2f\x17\x2f\xed\xe9\x74\x75\x78\x70\x43\x75\x43\xd6\x3d\x1e\x2f\x52\x2a\x0f\xba\xc9\x11\xe9\xbd\xcc\xc4\x43\x97\x34\x63\x2c\x35\x82\xde\xcd\xc5\x80\x68\x5b\xdd\x53\x7b\x3a\xe8\xc6\x5b\xaa\x28\x6e\xab\x02\xbf\x07\x0f\x1e\xbb\x71\xeb\x9a\x96\xa1\x12\x83\xce\x9a\xb3\x2e\x4e\x64\xae\xbb\x7c\xc2\xd9\xb7\x00\x00\x00\xff\xff\x75\xdf\xbe\x7f\x52\x03\x00\x00")

func assetsTplETplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplETpl,
		"assets/tpl/e.tpl",
	)
}

func assetsTplETpl() (*asset, error) {
	bytes, err := assetsTplETplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/e.tpl", size: 850, mode: os.FileMode(511), modTime: time.Unix(1585652912, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplEntityTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x41\x0a\xc2\x40\x0c\x45\xf7\x85\xde\x21\x8b\x2e\xa5\x07\x10\x5c\x09\x5d\x76\x21\xbd\xc0\x68\x83\x54\x67\x3a\x25\x4d\x29\x25\xe4\xee\x12\x75\xa4\x54\xc1\x59\x4d\x5e\xfe\x0f\x2f\xcf\x44\xca\xc6\x9d\x3d\x1e\x63\x08\xd8\xb3\x6a\x9e\xf1\x32\x20\x24\xae\x0a\x23\xd3\x74\x61\x10\x0b\x93\xeb\xaf\x08\xc5\x6d\x07\x45\xc7\x18\x60\x7f\x80\xb2\xea\xd0\xb7\xa3\xaa\xc8\x93\x95\xb5\x0b\x56\x7b\xbd\x04\x9b\x65\x78\xc3\x44\xaa\x48\xc1\x71\x2a\xc3\x26\x7f\xc2\xe0\xe8\x6e\x3a\x22\xd8\xb7\xf6\xd1\x2f\xdb\x7a\xf2\x7e\x6d\x6c\xf3\x1f\x6b\x8a\xf3\x56\x9a\xe2\xbc\x72\x4e\xc0\x4e\x7d\x9c\x61\xb5\xf9\x65\xf6\x08\x00\x00\xff\xff\x6e\x2e\x32\xff\x48\x01\x00\x00")

func assetsTplEntityTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplEntityTpl,
		"assets/tpl/entity.tpl",
	)
}

func assetsTplEntityTpl() (*asset, error) {
	bytes, err := assetsTplEntityTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/entity.tpl", size: 328, mode: os.FileMode(511), modTime: time.Unix(1584588363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplExampleTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x6d\x6b\xdc\x46\x10\xfe\x2e\xd0\x7f\xd8\x0a\xee\x22\x99\x8b\xe4\xd4\x49\x09\x82\xa3\xed\xbd\x84\x06\x92\xd4\xc5\x2e\xfd\x50\x4a\xd8\x93\xf6\xee\x16\x4b\xbb\xba\xdd\x55\x1a\xd7\x18\x2e\x50\x9a\x84\x24\x76\x20\x4d\x02\xad\xd3\x77\xf7\x85\x42\xed\x0f\xa5\x31\x97\x94\xfe\x19\x4b\x67\xff\x8b\x32\x92\xee\xcd\x75\x8a\x69\x09\xe4\xdb\xec\xec\xcc\xce\xcc\xf3\x3c\xb3\x11\xf6\x56\x70\x87\xa0\x70\x55\xf6\x02\x5d\xd3\x35\x1a\x46\x5c\x28\x64\xea\x9a\xe1\x63\x85\x5b\x58\x12\x47\xf6\x02\x43\xd7\x8c\x76\xa8\x0c\x5d\xbb\x8a\x8c\x0e\x55\xdd\xb8\x65\x7b\x3c\x74\x3a\xfc\xb4\xec\x05\xa7\x7d\x41\xaf\x11\xe1\x64\xaf\x40\xa8\x22\x52\x51\xd6\x01\x53\x2a\x41\x59\x47\x82\xc9\x88\x72\x62\x01\x01\x16\x94\x52\xab\x11\x41\x8d\x5a\x9d\xb3\x36\xed\x34\x99\xa2\x6a\x15\x49\x25\x62\x4f\xa1\x35\x5d\x7b\x87\x4b\x85\x10\x42\x79\x3e\x72\x9c\x64\x6b\x37\x79\xd2\xd7\xb5\x45\xe8\x0f\x21\x44\x99\x42\x8e\x33\xfc\x75\x27\xd9\xfc\x5e\xd7\xae\xe0\x90\xcc\x84\x0f\x3f\xff\x39\xbd\xf5\x54\xd7\x16\xb1\x94\xb3\xef\xec\x7c\x36\xfc\xe6\x86\xae\x35\x6a\x79\xce\xe4\x62\xf0\x20\xb9\x7f\x4f\xd7\xea\x5d\x2c\x24\x51\x53\x4f\x3d\x7f\x94\x65\x2c\xd3\x90\x7c\xc2\x19\x99\xdc\xa4\x8f\xff\x48\xee\x0e\x74\xed\x32\xbe\x7e\xd1\x0f\x48\xd1\x53\xba\xd5\x4f\x7e\xf8\x69\xf8\xcb\xe0\xf0\xf1\xef\x07\x7f\x7d\x95\x6e\x6c\x67\x11\xef\x46\x84\xcd\x44\xe4\x77\xe9\xc3\x5d\x5d\x5b\x07\x40\x1c\x07\x8d\x5d\xe9\xbd\xdf\x92\xc1\x03\x5d\x6b\xc7\xcc\x43\x17\x19\x55\x8d\x9a\xe9\xb5\x3b\x47\xf0\xb2\xd0\x9c\xec\x05\x76\xa3\x06\x88\xd1\x76\xd1\x98\xb4\x9b\xbd\x18\x07\x17\x78\xe0\x43\x8e\x3d\xea\xbb\x82\x0c\xc3\x82\xc8\x69\x27\xaa\x22\xe3\xd4\xdb\x92\x62\x67\xa9\x8b\x59\xa7\x8b\xe9\x29\x23\xeb\xc7\x97\x0c\xb9\x55\xd4\x0e\x95\xbd\x14\x09\xca\x54\xdb\x34\x4a\xd2\x2d\xc9\xb7\x94\x17\x99\x60\xf9\x96\x53\x92\x6f\x7a\x39\x5c\xd5\x92\x2c\x47\x60\xc1\xc3\x55\x25\x62\x52\x0e\xb8\x57\xbd\xc4\x3d\x1c\x94\x15\x0d\xc9\x55\xa8\x56\x2d\x49\xa3\x92\x37\x00\xe8\x17\x26\x70\x54\x98\x40\xfb\xc8\xcb\xc5\xc8\xcc\xb9\x2a\x0e\x05\x3f\x15\x5d\x8b\x45\x60\xbf\x17\x13\xb1\xda\x94\x1e\x8e\xc8\xcc\xb0\x56\x25\x93\x99\xc7\x19\x23\x9e\xa2\x9c\x55\x10\x11\x02\x26\x02\xc4\x80\x0b\xd3\xc8\xf5\x5a\x41\xbe\x64\x56\x86\x1f\x44\xbc\x56\x45\x8c\x06\x00\x53\x84\x19\xf5\x4c\x22\x84\x95\x01\x32\x79\xca\x5e\x22\xaa\x20\xb4\xce\x19\x93\x59\xe1\xc2\x61\x1d\x13\x08\xda\x98\x09\x04\x87\xa5\x6b\x82\xa8\x58\x30\x34\x89\xcf\xea\x5c\xc3\x02\x35\x6a\x23\x66\xf3\xf3\xda\x5a\x86\xd7\xfa\x7a\xa3\x85\xe6\xc6\x87\xcb\xdc\x27\xd9\xd6\x66\x2a\xa1\x8c\xaa\xfa\xf8\x29\x73\xc4\x34\x8c\x3c\xab\x9a\x62\xbb\x5c\x23\x00\x72\xba\x5c\x2a\xe0\x04\xe0\x76\x17\x16\xe6\xcf\x57\xf2\x6d\x72\x0d\xc1\x79\x7e\x83\xa5\x74\x8d\x33\xaf\x2f\x9c\x3d\xf7\x06\x9c\x73\x36\x5c\x63\x85\x32\x3f\x20\x3e\xb8\x0a\x4e\x5c\x23\x56\xed\xf3\x61\xeb\x2c\xf8\x0a\x40\xdc\x33\xf3\x95\xf1\x86\xb8\xe8\x5c\x25\x1b\xb2\x51\x43\xd5\x29\x5d\x5b\xba\x36\x3d\x62\x15\x5d\x21\x1f\x8f\x1d\x66\xa3\x66\x4d\x56\x24\xfd\x7a\xfb\x60\xe7\xbb\xf4\x76\x3f\xdd\xba\x3d\xfc\xe2\xd3\x7c\x57\x0a\x08\x96\x89\x54\xe3\xb4\x0b\x94\xf9\x1f\x74\x89\x20\xa6\x42\x73\xc5\x8f\x64\x2f\x67\xb0\x1c\x85\x4a\xd7\x5a\x9c\xaf\x00\x52\xe3\xec\x35\x28\xa6\xb8\xcf\xb3\xca\x82\xc8\x38\x50\x63\x09\x4d\xf5\x6a\x43\x19\xb3\x0c\xf9\x16\x7c\x22\x37\xff\x4c\x1f\xee\x1e\xde\xbc\x7b\xb8\xd5\x3f\xf8\xf1\x46\x7a\xe7\x79\xba\xb1\xbd\xbf\xd7\xdf\xdf\xbb\x93\xfd\xb0\xff\x10\x99\xb2\x9b\x42\x70\x31\x91\x19\x2c\xdc\x22\xec\x5b\xc0\xcc\xbc\xec\x87\xf3\x1f\xe5\x57\xf0\x41\x6c\x3c\x4d\x36\x1f\xc1\xff\x71\x7f\x63\x7f\xaf\x9f\x3e\xf9\xf6\xc5\x00\x5c\xc2\x52\x9d\x64\xf6\x7f\x1d\x4e\x48\x65\x32\x1a\x1c\xb7\x1f\x27\x68\xfd\x68\xdf\xfd\x67\x19\x3a\x9b\xc7\xb5\x5b\xe7\x31\x7b\x65\xfa\x4d\x6e\x7d\x99\x3c\x1b\xbc\x18\xdb\xba\x20\x58\x9d\x48\x59\xbe\xff\xdf\x74\x55\x54\x28\xfb\xfe\x4b\x9a\xa5\x79\x1d\x87\x51\x40\xde\x8f\xfc\x97\x3c\x49\x51\xe1\xff\x4d\xf2\x77\x00\x00\x00\xff\xff\x0f\x0d\x50\xf5\xaa\x08\x00\x00")

func assetsTplExampleTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplExampleTpl,
		"assets/tpl/example.tpl",
	)
}

func assetsTplExampleTpl() (*asset, error) {
	bytes, err := assetsTplExampleTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/example.tpl", size: 2218, mode: os.FileMode(511), modTime: time.Unix(1584588363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplInitTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xdf\x8b\xeb\x44\x14\x7e\x6e\x20\xff\xc3\x18\xe8\xde\x44\x4a\xb3\xed\xde\x7b\x91\x4a\x50\xdb\x5e\x51\x70\xfd\x41\x7d\x97\xd9\x64\xd2\x0e\x26\x33\xd9\x99\xc9\xe2\x2a\x85\xf5\x45\x7c\x70\x55\x58\x75\x5f\x56\x11\x54\x54\x04\x77\x1f\x44\xa1\x08\xfe\x35\x6d\xf5\xbf\x90\x33\x33\x49\x93\xba\xde\xa7\x64\xbe\xf3\x9d\x33\xe7\x7c\xf3\xcd\xd0\xbc\xe0\x42\x21\xdf\x75\x3a\x5e\x82\x15\x3e\xc1\x92\x84\xf2\x34\xf3\x00\x48\x73\xa5\xbf\x8c\xa8\xb0\x14\x06\x93\x4a\x50\x36\x97\x9e\xeb\x04\xae\xe3\x3a\x67\x58\xe8\xe4\x1c\x4b\x45\xc4\x74\x8c\x9e\x95\xa7\x59\x7f\x3a\x76\x9d\x8e\xcc\xf0\x19\x69\x22\x3a\x21\x2d\x59\x8c\x28\xa3\xca\x0f\xd0\x07\xae\xd3\x89\xd3\x39\x1a\x45\x28\x39\x99\x70\x96\xd2\x39\x40\x9d\x57\xb8\x54\x23\x84\x10\xf2\x32\x1e\xe3\x6c\xc1\xa5\xf2\x7a\x10\x78\x93\x0b\x13\x38\x3a\x3a\x7c\xac\x91\xd7\x71\x4e\x0c\x55\x70\x5e\xb1\xb0\x94\x06\x1b\x0c\x8f\x1e\x3e\x7a\x6c\xd0\xe9\xd8\x72\xbd\x77\x29\x4b\x32\x92\x18\x78\xb2\xc0\x42\x12\x35\x42\x5e\xa9\xd2\xe7\xf2\x93\x87\x06\x3e\xc6\xef\xbd\x51\x10\x36\x42\x83\xc3\xc3\x0a\x78\x35\xc9\xc8\x08\x3d\xd2\xeb\x65\x73\xe6\x48\x0f\x34\x1d\xfb\x71\x3a\x0f\x5c\xa7\x13\x86\xd5\xec\x7b\x91\x25\x28\xa0\xce\x0b\x52\xcf\x8b\xa4\x12\x65\xac\xb4\x14\x30\x36\xb4\x8d\x8c\xc6\x28\x0c\xd7\x37\x77\xeb\xaf\x2f\x5c\x47\x0f\xae\x43\x94\xe9\x6f\x18\x6e\x7f\xb9\x5d\x7f\xf6\x9d\xeb\x68\x05\xda\x59\xdb\x2f\x7e\xda\x7c\xfc\x07\x64\x61\x29\xf7\x0a\xde\x7e\xb4\xfd\xf6\x43\xd7\xb1\x6a\xb4\x42\xab\xab\xf5\xe7\x97\xae\x53\x29\xd2\x2c\xf8\xe7\x57\x26\xeb\x6d\x9a\x93\xf7\x39\x23\xbb\xd0\xe6\xfa\xf7\xf5\x27\x2b\xd7\xa9\xf4\x69\x74\xb8\xb9\xb9\x58\x7f\xff\xe3\xf6\xe7\xd5\x3f\xd7\xbf\xfd\xfd\xd7\x37\x9b\x4f\x7f\x30\x34\xd0\xf5\x3f\x34\x43\xd8\x7c\x79\x67\x45\x0a\x43\x54\x43\x9b\xcb\x5f\xd7\xab\xab\x86\x75\x8c\x9e\xb5\x86\x41\x65\x31\xad\x22\x4d\x6d\x77\xb2\xff\xe4\xb4\xc4\xd9\xcb\x3c\x4b\x80\xde\xaf\x9a\xef\x21\xcf\x33\xde\xeb\x34\x61\x14\x21\xef\xc1\x4b\x92\xe2\x70\xb6\xc0\x6c\xbe\xc0\xf4\x81\x67\x0f\x3a\x91\x0c\x3c\x9a\xe6\xaa\x3f\x2b\x04\x65\x2a\xf5\xbd\xae\x1c\x75\xe5\x8b\x2a\x2e\x7c\xf8\x4b\x82\xb0\x2b\x5f\x88\x8d\x72\x51\x57\x1e\x14\xf0\x07\xa5\x23\x25\x4a\x72\x90\xf1\x38\x7a\x0d\xbc\x7c\xa0\x68\x4e\xde\x81\xfd\xa2\xae\x34\x56\x83\x26\xe0\x30\xea\x05\x1c\x5b\xbd\x00\x53\xec\x22\x5c\xec\x16\xe6\x08\xeb\xa5\x3d\x36\xbd\x2e\x45\xd6\x7f\xab\x24\xe2\xfc\x89\x8c\x71\x41\x5a\xe3\x07\xc0\x00\x97\x26\x24\x25\x02\x81\xa8\xf6\x2a\x82\x74\x44\x08\x18\x55\x90\x98\x9f\x11\xe1\x07\xcf\x6b\xe4\x99\x08\x31\x9a\x19\x92\x65\x0d\x80\x76\x6c\x6f\xc0\x24\xe3\x92\x58\xf2\xa0\xcd\xee\x14\x98\xd1\xd8\x87\x40\xa0\x81\x65\xa3\xc8\x10\x8a\xcc\xcc\x5d\x69\xd6\x18\xfe\x5f\x8d\x61\xb3\x46\x8d\x6a\x10\xb0\xa5\x0f\xbf\x31\x67\x8c\xc4\x8a\x72\xd6\xab\xe6\x01\x7f\x80\xef\x7c\x2f\x3f\x87\xd7\xad\x87\x12\xc9\x02\xe3\x96\xfd\x01\x5b\x65\x97\xad\x7a\xfd\x19\x51\xd6\xc1\x13\xce\x98\xd4\xc2\x5a\x20\xb8\x8f\x09\x57\xa2\xc5\x04\x00\x98\x82\xa8\x52\x30\xb4\x4b\xb0\xbe\xd7\x1e\xdf\x93\x15\x3a\xe4\xa2\x32\x77\xfd\xea\x34\x7b\xb6\xe5\xaa\x58\xdf\x66\xda\x01\x6c\x94\xd1\x4c\xef\xa2\xf7\x68\xab\xde\xde\xa2\x7a\xbd\xee\xd9\xc1\x86\x9e\xb6\xc1\xbf\x01\x00\x00\xff\xff\x8c\x02\xa6\x98\x53\x06\x00\x00")

func assetsTplInitTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplInitTpl,
		"assets/tpl/init.tpl",
	)
}

func assetsTplInitTpl() (*asset, error) {
	bytes, err := assetsTplInitTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/init.tpl", size: 1619, mode: os.FileMode(511), modTime: time.Unix(1584588363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplMarkdownTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xc1\x6a\xea\x40\x14\x86\xf7\x81\xbc\xc3\x81\xb8\x50\xb8\xc9\x03\x08\xf7\x6e\xae\x1b\xb9\x17\xeb\x42\xba\x11\x17\xb1\x9e\x16\x69\x92\x96\x68\xa0\x61\x66\xc0\x45\xa1\x85\xd2\xd6\x45\xc1\xac\x0a\x05\x11\xbb\xa8\x52\xda\x82\x98\x3e\x8e\x19\xf5\x2d\x4a\x66\x9c\xd4\x56\x9a\xc5\x84\xf9\xff\xc3\xf9\x4f\xbe\x13\xc3\x80\xd5\xc3\x98\xf7\x62\x3e\x3a\xd7\x35\x5d\xa3\xc9\xfc\x36\xb9\x1c\xd0\x54\x4d\xfa\xd7\x40\x61\x35\x7d\xe5\xd1\x0d\x50\x48\x86\x17\xfc\x65\x0c\x54\xd7\x68\xd1\x34\x4d\x71\xa8\x13\xe4\x4b\xd7\x08\xf1\x6d\xef\x08\xc1\xaa\xd9\x4d\x07\xff\xb7\x3b\x5d\xc6\x28\x10\x62\x95\xbd\x16\x9e\x31\x46\xeb\xe9\x45\x98\x15\xdb\x45\xc6\x1a\x79\xe3\xd3\xfd\x6a\x15\x40\x3e\x94\x10\xeb\xef\x89\xeb\xa2\x27\x9a\x89\x14\xf4\x5a\x8c\xa5\x03\xab\xc0\xdc\x31\x86\xbf\x20\xd7\xee\xa2\x0b\xc5\xdf\x60\x95\xb0\x73\x20\xe3\x75\xcd\x30\x0c\x20\x44\x78\x2a\xc9\x52\xf7\xad\x3c\x5d\xfb\x93\x95\x65\x79\x69\x86\x29\x68\x3c\x0d\xf8\xe4\x4d\xd2\x90\xa4\x84\x00\x14\x96\xcf\x71\x72\x7f\x05\x14\x78\x34\x4d\xfa\xa3\xc5\x6c\xbe\x7c\x9c\x53\x58\xc7\xd1\x6a\x32\x4c\x7a\xef\x99\xc3\xa3\xe9\x62\x16\xaf\xef\x26\xbb\x58\x15\x55\x73\x97\xed\x37\x61\x0b\xb2\x1c\x75\x03\x59\x40\x72\x02\xd7\x93\x1f\x03\x20\xb0\x4b\xa9\x16\x9e\x62\x25\x70\x9b\xe8\x33\x26\xf5\x72\xa7\x12\x38\xce\x66\x37\x25\x3c\xb4\x03\xa7\xbb\x6f\x3b\x01\xaa\x82\xaa\xdf\x76\x6d\x3f\xfc\x87\xa1\x52\x64\xab\x1f\x16\x51\xaf\xed\x55\x1b\x79\x23\xfb\x97\x0a\x99\xf7\x11\x00\x00\xff\xff\x54\x04\xaf\xad\x62\x02\x00\x00")

func assetsTplMarkdownTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplMarkdownTpl,
		"assets/tpl/markdown.tpl",
	)
}

func assetsTplMarkdownTpl() (*asset, error) {
	bytes, err := assetsTplMarkdownTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/markdown.tpl", size: 610, mode: os.FileMode(511), modTime: time.Unix(1584588363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplTablesTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xe5\x4a\xce\xcf\x2b\x2e\x51\xd0\xe0\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x50\xc9\x2c\x49\xcd\x55\xb0\xb2\x55\xd0\xab\xad\x05\xc9\x80\xf9\x7a\xa1\x05\x05\xa9\x45\x21\x89\x49\x39\xa9\x7e\x89\xb9\xa9\xb5\xb5\x0a\x0a\x0a\x0a\xb6\x0a\x4a\x30\x69\x24\x19\x25\x05\x7d\x7d\x05\x98\xb8\x73\x7e\x6e\x6e\x6a\x5e\x49\x6d\x6d\x75\x75\x6a\x5e\x0a\xc8\x40\x4d\x40\x00\x00\x00\xff\xff\xf6\x4d\x87\xcf\x77\x00\x00\x00")

func assetsTplTablesTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplTablesTpl,
		"assets/tpl/tables.tpl",
	)
}

func assetsTplTablesTpl() (*asset, error) {
	bytes, err := assetsTplTablesTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/tables.tpl", size: 119, mode: os.FileMode(511), modTime: time.Unix(1584588363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/tpl/curd.tpl":     assetsTplCurdTpl,
	"assets/tpl/e.tpl":        assetsTplETpl,
	"assets/tpl/entity.tpl":   assetsTplEntityTpl,
	"assets/tpl/example.tpl":  assetsTplExampleTpl,
	"assets/tpl/init.tpl":     assetsTplInitTpl,
	"assets/tpl/markdown.tpl": assetsTplMarkdownTpl,
	"assets/tpl/tables.tpl":   assetsTplTablesTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"tpl": &bintree{nil, map[string]*bintree{
			"curd.tpl":     &bintree{assetsTplCurdTpl, map[string]*bintree{}},
			"e.tpl":        &bintree{assetsTplETpl, map[string]*bintree{}},
			"entity.tpl":   &bintree{assetsTplEntityTpl, map[string]*bintree{}},
			"example.tpl":  &bintree{assetsTplExampleTpl, map[string]*bintree{}},
			"init.tpl":     &bintree{assetsTplInitTpl, map[string]*bintree{}},
			"markdown.tpl": &bintree{assetsTplMarkdownTpl, map[string]*bintree{}},
			"tables.tpl":   &bintree{assetsTplTablesTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
