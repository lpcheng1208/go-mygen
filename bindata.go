// Package gomygen Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// tpl/curd.tpl
// tpl/entity.tpl
// tpl/example.tpl
// tpl/markdown.tpl
// tpl/tables.tpl
package gomygen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplCurdTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5d\x6f\x1b\x45\x17\xbe\xdf\x5f\x71\xba\xaa\xa2\xdd\x64\x35\xee\x2b\xbd\xe2\x22\x92\xa9\x12\x7b\x43\x2d\x12\x27\xd8\x1b\x10\xaa\xaa\x6a\xed\x1d\x87\x55\xf7\xc3\x99\x1d\x27\x1b\x8d\x46\xa2\x12\x37\x85\x16\x6e\x68\x90\x0a\x02\xa5\x02\x89\x1b\x9a\x5c\x80\x90\xb8\xe1\xcf\x34\x4b\x7e\x06\x9a\x9d\xb5\xbd\xfe\x88\xbd\x56\x02\x14\x85\x8b\xaa\xf1\x7c\x9c\xe7\x9c\xf3\x9c\xe7\xcc\xec\xd0\xa3\x2e\x06\xc6\x50\x93\x92\x5e\x9b\x5a\x76\xcb\xc3\x75\xdb\xc7\x9c\x6f\x85\x0e\xf6\x20\x4a\x87\x81\x29\xd5\x75\x58\x8e\xf6\x3d\x54\x5d\x57\xac\x58\xfe\x69\xc5\x0a\x57\x94\x4e\x2f\x68\x43\x1d\x1f\x4e\xb3\xa1\x39\xad\xfe\x2e\x1d\x96\x2f\x47\x61\x0a\xc1\xb4\x47\x02\x58\xba\x74\x8d\xf0\x60\xd5\x69\x19\x0a\x9f\x07\x6a\xc5\x03\x58\x2b\xbe\x3a\xac\x15\x0f\x61\x4b\xa5\x8b\xcf\x7f\x3d\xff\xe2\x38\x79\xf2\x71\xf2\xcd\x93\x3f\x5e\x7c\x72\x71\xf2\xe3\xf9\x4f\x5f\x25\xaf\x7e\x91\x1e\x69\xfe\x0c\x38\x1d\xf6\x30\xad\x84\x5e\xcf\x0f\x22\x4d\x17\x99\x75\x83\xbd\xa1\x0f\xaa\x60\x61\xcd\xf3\x36\x5c\xec\x39\x9b\x6e\x44\x39\x07\x35\x0f\x7a\xfe\xfd\x8b\x8b\x93\xa7\xc9\xf3\xb3\xe4\xd9\x2b\x54\x14\xaf\x11\x1e\x46\x5a\xb4\xef\x59\x31\xcd\x10\x0d\xe8\xda\xc4\xf6\x23\x40\x08\xb9\x01\xc5\xa4\x63\xb7\x31\xe3\x3a\x68\x24\x3c\x8c\x1a\x38\xea\x79\x14\xee\x3f\x98\x6a\xd7\x00\x4c\x88\xf8\x17\x12\x1d\x98\xb2\xdf\xc3\xe4\x48\x8e\xad\x96\xc1\x47\xd5\x75\xf4\x9e\x18\xca\x00\xfb\x48\x08\x21\x5d\x71\x3b\xe9\xba\x5b\x65\x08\x5c\x0f\x96\x96\xfa\xbf\x04\x4d\x26\x21\xf5\x50\x78\x3a\xc8\x86\xc2\x15\x07\x77\x30\x81\x14\x02\x55\xbc\x30\xc2\x9a\xae\x74\xc2\xfe\x48\x1d\xc7\x54\x13\x3e\x90\xf0\x50\x80\x33\x86\xea\x3d\xcf\x9b\xf0\x98\x71\x45\x00\x95\xb3\x6d\xcd\xb6\x1d\x68\x0a\x63\xc4\x0e\xf6\x30\xa4\x5b\xd2\x7c\x47\xb5\xa0\x13\x72\xbe\x44\xc2\x43\xc4\x18\xba\xd7\xf3\xbb\x59\xc4\xa5\x12\x63\xa8\x12\xfa\x3e\x0e\x28\xe7\x0a\x63\x38\x70\x38\x4f\xe3\x11\x81\xdc\x2a\xa7\x81\x5c\x1e\x4f\x3b\x0c\xa8\x1b\xf4\xb0\xc2\xfb\x29\x28\x4f\x2e\x92\x2e\x06\xae\xa7\x70\x25\xc7\x42\x19\xec\x6e\x17\x07\x4e\x8e\x19\x63\x7a\xad\xb2\xcb\x63\x62\x4c\xe0\xee\x03\x7a\x27\xb4\x84\xd6\xd5\x8e\x17\xda\xf4\xad\xff\xab\x62\x2a\x17\xe9\xea\x44\xec\x68\x43\xae\x9c\x92\x03\x2f\xc2\x30\x66\xd6\x0d\x8a\x19\xad\x05\x85\x4d\x52\xd7\xc7\xc8\x72\x7d\x5c\xc0\xac\x58\x36\xdd\xea\xfc\xbd\x4d\x29\x8c\xe9\x54\x67\xff\x71\x5d\x70\xd3\x2f\xce\xa1\x28\x9f\x3d\x1f\x88\x72\x01\x4d\x2e\x20\xc9\xac\x16\x0a\xeb\x71\x54\x8a\x43\xac\x11\x35\xbe\xe9\xaa\x19\x24\xba\xb0\x66\x06\x92\xf9\xfb\xf5\x01\xff\xe9\x83\x73\xae\x8c\xa8\xe3\x61\xf2\xf5\xcf\xc9\xf1\xd9\x02\xc2\x68\xda\x07\x78\x5c\x16\x07\xb6\xd7\xc3\x93\xaa\x68\x41\x2b\x0c\xbd\xb1\xe2\x8f\xa8\x4f\x47\xcf\xa2\x1d\x82\xbb\x36\xe9\x1b\x1d\x3f\x82\x26\x8e\x1a\x61\x60\x70\xd2\x90\xac\xdb\x66\xf6\xd2\x39\x33\xc6\x6d\x2d\x75\x69\xca\x89\x96\x33\x77\x60\x13\xb0\x3b\x1d\xdc\xa6\x95\xb0\x17\x50\x48\x99\x57\x72\x23\xd2\x6c\x19\x24\x08\x12\x05\xbd\x96\xce\x62\x47\x9b\x61\xb7\x25\x0e\x84\x9c\xdd\xb7\xe1\x4e\x2e\xe7\x4a\xa9\x94\x1c\x9f\x9d\xbf\xfc\xf6\xf5\xef\x27\xc9\xe3\xd3\x42\x39\xaf\x10\x6c\x53\x2c\x63\x9a\xbe\x50\x07\xcd\xb3\x23\x5a\x73\x64\x14\xe3\x39\xdf\xf7\x2c\x1c\x53\x91\x21\xb5\x56\x6f\x9a\x0d\x0b\x6a\x75\x6b\x1b\x54\x58\x11\xbd\x65\xb7\xdb\xc5\x24\x67\x0c\x56\x40\x05\x8d\x31\x54\x0b\x22\x4c\x68\xee\xa6\xa3\xc3\xfb\x6b\x9b\xbb\x66\x33\x37\xbb\x65\x93\x47\x9c\xeb\xea\x1c\x62\xf1\xb5\x31\x3b\x6c\x11\xd2\x01\xd9\x1e\x24\xdf\x85\xbb\xdb\x74\x37\x64\x0a\xc7\x68\xdf\x14\x83\x12\x69\x26\xed\x79\x59\x2d\xac\xaa\xdd\xae\x33\x9f\xe1\xe9\x7a\xca\x71\xbb\xbb\x53\x5d\xb3\xcc\x99\xb4\x36\x4d\x4b\xce\x09\xbc\xfc\x1d\xf6\x83\x7b\x66\xc3\x14\x53\x3b\xc4\xf5\x6d\x72\xf4\x2e\x3e\xe2\x1c\xca\x70\x57\x55\xb2\x53\x4f\xd0\x6a\x3f\xc2\xda\xfd\x07\x39\x99\x1b\x70\x47\x1f\x30\x72\xdb\x35\xe0\xf6\x81\xed\x89\xa5\x19\x84\xb0\x9e\xc2\x70\x9e\x99\x19\xdc\x96\xe4\x6f\x03\x18\x13\x7b\x04\x31\x19\x43\xfd\xab\xb6\x8f\x06\xcd\x06\x8f\x1d\x8c\x52\x48\x23\xdd\x0b\x92\x2f\x4f\x93\xa7\x8f\x5f\xff\xf6\xd9\xf9\xa7\x27\x85\x5b\x99\x15\x5f\x63\x33\xb3\xe2\x9b\xdd\xcc\x16\xa7\x40\x76\x36\x2b\xfe\x77\xf5\xb6\x31\x9e\x6f\x6e\x6f\x5b\x9c\x70\xd9\x15\xe6\x12\x7e\x33\x5b\x5d\xd6\x8c\xa6\x34\xbb\x52\x29\xf9\xee\x87\x8b\xd3\x97\xf9\xc7\x85\x42\xf9\xde\x70\x03\x67\x4e\xae\x09\x8e\x84\xeb\x05\x1f\x13\xf2\x24\x34\xcd\x4d\xb3\x62\x09\x0e\x7c\x34\xf2\x68\xb2\x02\xea\x46\x63\x7b\xeb\x32\x7a\x94\x0c\xb2\x5f\x8d\xe9\xee\xc1\x13\x48\x2a\xa7\x7c\xc5\xd5\x02\xb8\x42\xf4\xb5\x40\x73\x9d\x08\x52\x2a\xff\x91\x68\xd3\x62\x94\x35\xe7\x8a\x1e\x06\x9a\x58\x28\x8f\x9b\x08\x59\xc4\xf5\x1b\xee\xde\x47\x54\xeb\x8f\x34\x70\x17\xdb\x54\x53\xef\x1a\xaa\x01\x1e\x4e\xdd\xd7\x75\x03\x54\x43\x4d\xb1\xf4\xac\x4c\x67\x54\x69\x27\x24\xf0\xd0\x10\x70\xab\x65\x90\x05\x2b\x72\xc0\xb2\x8d\xa3\x75\x29\xd6\xc9\xaf\xe6\xd9\xa4\x64\x35\x29\x3f\x4c\xaf\xfe\x85\xbd\xe1\x92\x88\xce\x2f\xcd\xa2\x1f\xd5\xd7\xc6\xd4\x66\x6d\xab\x66\xc1\xff\xd4\x91\x2e\x3d\x4c\x47\x81\x8e\x7f\x0d\xc9\x11\x8d\xf9\x0d\xcc\xcd\x76\xa3\x6a\x36\x60\xfd\x43\xa8\x55\xa1\x6a\x36\x2b\x7f\x49\xb2\x64\xa6\x8a\x5d\x1f\xc4\x9d\x44\xd3\x41\x6b\x0f\x2f\x3d\x73\x63\x87\xca\xf6\x6e\xdd\xd2\x96\x75\x98\xd9\xa3\x66\xbc\xd2\xcc\x8e\x68\xe2\x49\x66\x29\xf5\xae\x48\x0e\xfe\x0c\x00\x00\xff\xff\x7e\xdd\xa8\x7a\xe6\x17\x00\x00")

func tplCurdTplBytes() ([]byte, error) {
	return bindataRead(
		_tplCurdTpl,
		"tpl/curd.tpl",
	)
}

func tplCurdTpl() (*asset, error) {
	bytes, err := tplCurdTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/curd.tpl", size: 6118, mode: os.FileMode(420), modTime: time.Unix(1564558706, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplEntityTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xc1\xca\xc2\x30\x0c\xc0\xf1\x7b\x9f\x22\x87\x1d\x3f\xf6\x00\x1f\x78\x12\x76\xdc\x41\xf6\x02\xd5\x05\x99\x36\xeb\xc8\x32\xc6\x08\x79\x77\x99\x5a\x29\x15\xec\xad\xff\x36\xe1\xe7\x54\xeb\xce\x9f\x03\x1e\x23\x11\x8e\x62\xe6\x64\x9b\x10\x52\x36\x83\x59\x78\xb9\x08\xa8\x53\x65\x3f\x5e\x11\xaa\xdb\x1f\x54\x83\x20\xc1\xff\x01\xea\x66\xc0\xd0\xcf\x66\xaa\xcf\x56\xb7\x9e\xf6\xa9\xd7\x49\xb1\xdb\xa6\x77\x4c\xa5\x89\x4c\x5e\xd2\x30\x14\xff\x4f\x48\x9e\xef\x66\x4e\x15\xc7\xde\xcc\x59\x09\x6d\x97\x10\x32\xec\x7e\xfd\x0d\xe6\xb8\x96\x5e\x8e\x6b\xc6\x4d\x61\xdf\xf4\xe1\x42\xf6\xf2\x8d\x7a\x04\x00\x00\xff\xff\xad\x16\x22\x7f\x3e\x01\x00\x00")

func tplEntityTplBytes() ([]byte, error) {
	return bindataRead(
		_tplEntityTpl,
		"tpl/entity.tpl",
	)
}

func tplEntityTpl() (*asset, error) {
	bytes, err := tplEntityTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/entity.tpl", size: 318, mode: os.FileMode(420), modTime: time.Unix(1553076821, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplExampleTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x7f\x6f\x13\x37\x18\xfe\xdf\x9f\xc2\xb3\xd4\x72\x87\x8e\x1c\x50\x98\x50\xa4\x88\x2d\x4d\xd1\x2a\x31\x06\x6b\xf6\xd7\x34\xa1\xeb\x9d\x93\x5a\x5c\xec\xd4\x76\xba\x74\x51\xa4\xa0\x55\x83\xd1\x9f\x5a\xa1\x48\xa5\x14\xba\xd1\x8d\x31\x89\x76\x12\x1a\x2c\x2d\xf0\x65\x72\x97\xf4\x5b\x4c\x3e\x5f\xda\x26\xa9\x06\x85\x6e\x7f\x21\x45\x91\x63\xbf\x7e\xdf\xe7\x79\x9f\xe7\xbd\x4b\xd1\x71\xaf\x39\x79\x0c\x0b\xcc\xc3\xbe\x00\x80\x14\x8a\x8c\x4b\x68\x00\xe4\x39\xd2\x19\x75\x04\xb6\xc5\xb8\x8f\x00\xca\x15\x24\x02\x57\x21\xca\x13\x39\x56\x1a\x4d\xb8\xac\x60\xe7\xd9\x09\x31\xee\x9f\xf0\x38\x99\xc0\xdc\x2e\x4c\xea\x40\x89\x85\x24\x34\x8f\x00\x12\x92\x13\x9a\x17\x08\x20\x8a\xa5\x5d\xe2\x3e\x02\x26\x00\x72\xb2\x88\x61\x26\x3d\xc8\x68\x8e\xe4\x87\xa8\x24\x72\x12\x0a\xc9\x4b\xae\x84\x15\xf0\x19\x13\x12\x42\x08\xf5\x55\x68\xdb\xc1\xca\x66\x70\xbf\x06\x2e\x2b\x50\x10\x42\x42\x25\xb4\xed\xe6\x1f\x1b\xc1\xfc\x2f\xe0\x92\x53\xc0\x1d\xc1\xcd\xdb\x8f\xc3\x9b\xcf\xc1\x65\x47\x88\xce\x24\x1b\x3f\x34\x1f\x5e\x07\x99\xb4\xbe\xb1\xb7\x5f\x5f\x0c\x16\x66\xc1\xe0\x98\xc3\x05\x96\xfb\xf2\x6c\x2f\xa9\xf8\x2c\x29\xe0\xef\x18\xc5\x7b\x07\xe1\xdd\xbf\x82\x99\x3a\xf8\xdc\x29\x0f\x7b\x3e\x8e\xd1\x84\x2b\xb5\xe0\xd1\x6f\xcd\xdf\xeb\x3b\x77\x9f\xb5\x5e\xaf\x86\x73\xeb\x2a\xe0\x8b\x22\xa6\x1d\x01\xfa\x28\xbc\xb3\x09\xaa\x00\xd8\xf6\xee\xcf\x70\xf6\x69\x50\x5f\x04\xb9\x12\x75\xe1\x30\x25\x32\x93\x36\xdc\x5c\xbe\xab\x43\x26\x3c\x2e\xc6\xfd\x44\x26\x0d\x2b\x80\xe4\x62\x40\x22\x31\x34\x5e\x72\xfc\x0b\xcc\xf7\xd4\x95\x44\x1b\xaf\x05\x11\x32\x61\x05\xec\xdf\x83\x29\x88\x8e\x7d\x2a\x88\x63\x8f\x8c\x39\x34\x3f\xe6\x90\x63\x08\x54\x81\x27\x28\x4c\xa6\x60\xae\x20\x13\x23\x45\x4e\xa8\xcc\x19\xa8\x4f\x24\xfb\xc4\x27\xd2\x2d\x1a\x6a\xe5\x99\x76\x9f\x38\xef\xea\x16\xa5\xfa\x44\x7f\x51\xad\x54\xda\x94\xe4\x25\xdc\xef\x33\x37\x75\x91\xb9\x8e\xdf\x2f\x49\x01\x5f\x55\xb5\x52\x7d\x02\x59\x51\x75\xd5\x6f\xbd\x52\x9a\xe8\x95\x92\x38\xde\x63\x3c\x5e\x69\x65\xf4\x3a\x56\xc3\x02\x25\xee\x27\xae\x94\x30\x9f\x1c\x12\xae\x53\xc4\x1d\x14\x4d\x0b\x98\xc0\x65\x94\x62\x57\x12\x46\x2d\x88\x39\x57\x44\x54\x93\x54\xe7\x0d\xa4\xed\x68\x41\x4f\x50\x53\xb5\x4c\x05\x7c\x94\x82\x94\xf8\xb0\x02\x8a\x0e\x25\xae\x81\x39\x37\x41\x75\x5f\x9a\xc4\x08\x96\xb1\x74\x83\x8c\x52\x11\x95\x8c\x37\xcc\xde\x38\xe5\x81\x8e\x38\xb5\x61\x02\x8e\x65\x89\x53\xb8\x17\x0e\xaa\x60\xc2\xe1\x30\x93\x6e\x8b\x08\xb4\xda\x84\x12\x69\xc4\x42\x29\xf0\x9d\x92\xeb\x61\x48\x22\x5f\x35\x77\x8c\x09\x89\xac\x68\x0c\x92\x03\x03\x27\xcf\x59\x91\xf9\x93\x88\x33\x16\xed\x3b\x42\x24\xd1\xa9\xd3\x03\x67\xce\x7e\x8c\xac\xd8\xe8\x49\x74\x8d\x50\xcf\xc7\x1e\xb2\xda\x16\x4f\xa2\x92\xcc\x9d\x2b\x8c\x9e\x41\x56\xdb\xa3\xc9\x53\x27\xad\xb6\xa1\x93\xf0\xac\x05\xaa\x20\x93\x86\xa9\x7d\x56\x34\xb5\x61\xc3\x07\xeb\xad\x8d\x9f\x83\xd9\x3b\xad\xb5\x19\x6d\x5b\xcd\x22\x8b\x85\xbc\x40\xb8\x90\x86\x84\xc7\xe3\xe1\x4f\x64\x15\xad\x09\xc7\x2f\x61\x45\xac\x52\x89\x9c\x50\xad\x56\x80\x6d\x4b\xe6\x31\x50\x05\x1c\x8b\x92\x2f\x77\x85\xbb\x84\xbf\xdd\x8d\x32\x32\x69\x33\xa1\x53\xf6\x47\x39\x4c\x68\xdb\xad\xcd\xef\xd5\x78\xf7\x80\x68\x2e\x4f\x45\xa1\x3d\x1a\xcb\xc4\x10\xe7\x8c\xb7\x55\x56\x16\xbf\xac\x1c\xee\x53\x43\xd7\xee\xe4\xf5\x68\xf9\x40\x5e\xd4\x3b\x6a\x5a\xd4\xdb\xc7\x2a\xb8\xf1\x32\xbc\xb3\xb9\x73\x63\x66\x67\xa5\xd6\xfa\xf5\x7a\x38\xbd\x1d\xce\xad\x37\x5e\xd4\x1a\x2f\xa6\xc5\xb8\xff\xce\x9c\x60\xe3\xe5\xeb\xe6\xed\xc7\xc3\x97\xc2\x07\xeb\xe1\x8f\xaf\x0e\xa2\x35\x4c\x7b\x88\x11\x4f\x28\xcc\x5f\x7f\x43\xa8\xac\x9c\xb2\xe0\x69\x0b\x0e\x58\xf0\x4c\x0f\xa9\x83\x59\x0d\x53\x83\x78\xa2\x77\xd6\xde\x16\x73\x6b\xee\x79\x30\xbf\xa4\x9e\x95\x0b\x73\x8d\x17\xb5\xf0\xfe\x5a\x37\xec\x8b\xce\x01\x26\x7b\x53\xc3\xa3\x4b\x94\xf8\xef\x0d\xac\xb6\x15\x29\x35\xbf\x87\x67\x90\x95\xe8\xe1\x01\xe9\x5b\xef\x0e\x27\xb8\x79\x2f\xd8\xaa\x77\xf7\x66\x90\x63\x47\xe2\xa3\xf5\x6a\x9c\x33\x76\xeb\x91\x00\x86\xe1\xed\x8d\x70\xe6\x7a\xa3\x3e\x1d\xdc\x5a\xeb\x46\x9f\x2d\x1f\x0e\xbf\x6d\x07\xdb\xb5\x60\x61\x23\x9a\x97\x27\x3a\x67\xb0\xf1\x77\xeb\xcf\x35\x20\xcb\xbb\xb4\x32\xe9\x44\x1a\xe7\x09\x7d\x73\xcb\x6d\x5b\x8f\x8d\x87\x73\x98\xc3\xd6\x8d\x27\xc1\xad\xc7\xc1\xbd\xd5\x70\x6b\x39\xbc\xb9\x14\xce\x2f\x34\xea\x8f\x80\x3e\x53\xc0\x0d\x8d\x8f\xab\x94\xd9\xb2\xfa\x66\xbc\xa7\x82\x3e\x4b\x41\x59\x4e\x7c\xc9\x7c\x7f\xd4\x71\xaf\x19\x26\xa8\x42\xec\x0b\xdc\x79\x3c\xc8\x0a\x05\xf5\x3a\x00\xd5\x38\x49\xb6\xbc\x97\x46\xbf\x52\x22\xc9\xf4\xc2\x30\xff\x4d\x3d\xd5\xc8\x72\x5b\xbf\x6c\xf9\xbd\x15\x0c\xef\x3d\x0b\x97\x36\xbb\x2d\xf7\x55\xd1\x3b\x72\xcb\xc5\x39\x8f\x12\x70\x87\xe5\xc2\xc5\xd9\xc6\xcb\x95\x6e\x0e\x1f\x8c\x77\x18\xe3\xd9\x76\xf0\x74\xb5\xf1\x6a\x5a\xf3\x6e\x2e\x4f\x35\xb7\x16\xc3\xd5\x29\xdd\x00\xab\xb1\xfd\x70\xa7\xf6\x53\x47\x67\xe6\xd7\xc3\x07\x53\x6f\xe1\xd7\x5d\x31\xde\x4f\xfe\xee\x47\xce\xe8\x24\x1c\xb9\x72\x71\x4f\xf3\x11\x67\xa2\xd7\xb5\x62\xdc\xcf\x96\xa5\x02\x86\x08\x15\x98\x4b\xf5\xdf\x9d\x41\xe9\x8c\xfa\x58\xc0\x08\x8f\x80\xc6\x79\x0b\xaa\x8f\x89\xde\x68\xe4\xa8\x88\x4e\x6a\xc1\xf8\x5d\xfa\x3f\xf8\x59\x95\x3d\xc0\xcd\x87\x65\xf7\xc1\xe0\xff\x89\xc1\x63\x75\xb4\x1a\xef\xe8\x86\x7f\x02\x00\x00\xff\xff\x1f\x45\x1a\x5b\xb1\x0f\x00\x00")

func tplExampleTplBytes() ([]byte, error) {
	return bindataRead(
		_tplExampleTpl,
		"tpl/example.tpl",
	)
}

func tplExampleTpl() (*asset, error) {
	bytes, err := tplExampleTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/example.tpl", size: 4017, mode: os.FileMode(420), modTime: time.Unix(1564558412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplMarkdownTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\xc1\x6a\xea\x40\x14\x86\xf7\xf3\x14\x07\xe2\x42\xe1\x26\x0f\x20\xdc\xbb\xb9\x6e\xe4\x5e\xac\x0b\xe9\x46\x5c\xc4\x7a\x5a\xa4\x49\x5a\xa2\x81\x86\x99\x01\x17\x85\x16\x4a\x5b\x17\x05\xb3\x2a\x14\x44\xec\xa2\x4a\x69\x0b\x62\xfa\x38\xce\xa8\x6f\x51\x32\x63\x62\x5b\x9b\xc5\x09\xe7\xff\x0f\xe7\x4f\xbe\x19\xc3\x80\xd5\xc3\x58\xf6\x62\x39\x3a\x27\x84\x89\xf9\xad\xb8\x1c\xb0\x44\x13\xfd\x6b\x60\xb0\x9a\xbe\xca\xe8\x06\x18\x88\xe1\x85\x7c\x19\x03\x23\xac\x68\x9a\xa6\x2a\x69\x05\xfd\x22\x94\xfa\xb6\x77\x84\x60\xd5\xec\xa6\x83\xff\xdb\x9d\x2e\xe7\x0c\x28\xb5\xca\x5e\x0b\xcf\x38\x67\xf5\xa4\x51\x66\xc5\x76\x91\xf3\x46\xde\xd8\xba\x5f\xad\x02\xe8\x87\x51\x6a\xfd\x3d\x71\x5d\xf4\xd4\xb2\x24\x04\xbd\x16\xe7\x24\x4b\xcb\x1d\x63\xf8\x0b\x72\xed\x2e\xba\x50\xfc\x0d\x56\x09\x3b\x07\x3a\x9b\x18\x86\x01\x94\x2a\x2b\x4d\xb1\xd2\xfe\x53\x16\xf9\x93\x4d\x65\x51\x84\x98\x0a\xc2\xd3\x40\x4e\xde\x34\x84\x04\x8f\x6a\x81\xc1\xf2\x39\x16\xf7\x57\xc0\x40\x46\x53\xd1\x1f\x2d\x66\xf3\xe5\xe3\x9c\xc1\x3a\x8e\x56\x93\xa1\xe8\xbd\x67\x8e\x8c\xa6\x8b\x59\xbc\xbe\x9b\xec\xb2\xdc\xa0\x34\x77\x81\x7e\x13\xb6\x64\xf5\x47\x6e\xc8\x2a\x32\x4e\xe0\x7a\xfa\x2f\x00\x14\x6b\x2d\xd5\xc2\x53\xac\x04\x6e\x13\x7d\xce\xb5\x5e\xee\x54\x02\xc7\xd9\x1c\x48\x09\x0f\xed\xc0\xe9\xee\xdb\x4e\x80\xe9\x40\xd5\x6f\xbb\xb6\x1f\xfe\xc3\x30\x55\xf4\xaa\x1f\xe9\xd7\x6b\x7b\xd5\x46\xde\xc8\xae\x4e\x21\x75\x3e\x02\x00\x00\xff\xff\xd7\x32\xbc\x15\x50\x02\x00\x00")

func tplMarkdownTplBytes() ([]byte, error) {
	return bindataRead(
		_tplMarkdownTpl,
		"tpl/markdown.tpl",
	)
}

func tplMarkdownTpl() (*asset, error) {
	bytes, err := tplMarkdownTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/markdown.tpl", size: 592, mode: os.FileMode(420), modTime: time.Unix(1552988812, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplTablesTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\x4a\xce\xcf\x2b\x2e\x51\xd0\xe0\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x50\xc9\x2c\x49\xcd\x55\xb0\xb2\x55\xd0\xab\xad\xe5\xaa\xae\x06\x73\xf5\x42\x0b\x0a\x52\x8b\x42\x12\x93\x72\x52\xfd\x12\x73\x53\x6b\x6b\x15\x14\x14\x14\x6c\x15\x94\x60\xd2\x48\x32\x4a\x0a\xfa\xfa\x30\x61\xe7\xfc\xdc\xdc\xd4\xbc\x92\xda\xda\xea\xea\xd4\xbc\x94\xda\x5a\x2e\x4d\x40\x00\x00\x00\xff\xff\xe2\xac\xd0\x9a\x72\x00\x00\x00")

func tplTablesTplBytes() ([]byte, error) {
	return bindataRead(
		_tplTablesTpl,
		"tpl/tables.tpl",
	)
}

func tplTablesTpl() (*asset, error) {
	bytes, err := tplTablesTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/tables.tpl", size: 114, mode: os.FileMode(420), modTime: time.Unix(1552876725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/curd.tpl":     tplCurdTpl,
	"tpl/entity.tpl":   tplEntityTpl,
	"tpl/example.tpl":  tplExampleTpl,
	"tpl/markdown.tpl": tplMarkdownTpl,
	"tpl/tables.tpl":   tplTablesTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"curd.tpl":     &bintree{tplCurdTpl, map[string]*bintree{}},
		"entity.tpl":   &bintree{tplEntityTpl, map[string]*bintree{}},
		"example.tpl":  &bintree{tplExampleTpl, map[string]*bintree{}},
		"markdown.tpl": &bintree{tplMarkdownTpl, map[string]*bintree{}},
		"tables.tpl":   &bintree{tplTablesTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
