// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// assets/tpl/curd.tpl
// assets/tpl/entity.tpl
// assets/tpl/example.tpl
// assets/tpl/markdown.tpl
// assets/tpl/tables.tpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTplCurdTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4f\x6b\xe3\x46\x14\xbf\x0b\xf4\x1d\xde\x8a\x25\x48\x89\x99\x6c\xa1\xf4\x10\x70\x4b\x62\x2b\x5d\xd3\xc4\x49\x6d\xa5\xa5\x2c\x4b\x91\xad\xe7\x20\x56\x7f\x9c\xd1\x28\x7f\x18\x06\x5a\xe8\x65\xa1\xdb\x9e\x36\x85\x6d\x69\xc9\xd2\x42\x2f\xdd\xcd\xa1\xa5\xc7\x7e\x99\xc6\xcd\xc7\x28\x33\x92\x1d\xd9\x8e\x23\x05\x52\xba\x87\x3d\x84\x10\xcd\xcc\xfb\xf3\xfb\xbd\xdf\x7b\x2f\xec\x64\x88\xc0\x39\xe9\x32\x9a\xf6\x99\xe3\xf6\x02\x6c\xbb\x21\x0a\xb1\x1d\x7b\x18\x40\xa2\x3e\x03\xd7\xb5\xe6\x06\x2c\x27\x07\x01\x69\x6e\xe8\x9a\xd0\x35\x5d\x1b\xa4\x51\x1f\xda\x78\x74\xdd\x63\xd3\xeb\x8d\x6f\x5b\xb0\xbc\xd8\x3c\xd7\x35\x8a\x2c\xa5\x11\x2c\x2d\xbc\xa4\x7c\xaf\x79\xbd\x9a\xf2\xab\x5c\xaf\xae\x5e\x7e\xf3\xe7\xc5\xb7\xa7\xa3\xa7\x5f\x8c\x7e\x78\xfa\xcf\x8b\xaf\x2e\xcf\x7e\xbd\xf8\xed\xbb\xd1\xab\x3f\xf2\xb0\xcc\xf0\x06\xaf\x16\xec\x23\x6b\xc4\x41\x1a\x46\x89\x69\xc9\x14\xfd\x68\xbf\x10\x8a\x21\xf1\x58\x0f\x82\x4d\x1f\x03\x6f\xcb\x4f\x98\x10\x60\xcc\x78\xbe\xf8\xf9\xc5\xe5\xd9\xd7\xa3\xe7\xe7\xa3\x67\xaf\x48\x65\xa7\x9d\xf8\x28\x31\x93\x83\xc0\x39\x66\xb9\xdb\x1a\x0c\x5d\xea\x86\x09\x10\x42\xfc\x88\x21\x1d\xb8\x7d\xe4\xc2\x02\x93\xc6\x47\x49\x07\x93\x34\x60\xf0\xe8\xf1\xb5\x76\x6b\x80\x94\xca\x9f\x98\x5a\x32\xfc\x83\x14\xe9\x49\xf6\x71\xad\x0e\x21\x69\x6e\x90\x8f\xe5\xa7\xdc\xe3\xd8\x15\x21\xc4\xd2\x35\x0f\x07\x48\x41\x3d\x21\x8d\x20\x4e\xd0\xb4\x74\xcd\x1f\xa8\xd7\xf7\xea\x10\xf9\x05\x72\x54\xee\x83\x78\x7c\xbd\x8d\xc7\xcc\x54\x1e\x69\x7c\x24\x5d\x71\x4e\xda\x69\x10\xcc\x05\xc8\x85\xae\x49\x7b\xf5\xfc\x61\xb7\xef\x46\xa6\xae\x71\x4e\xdd\x68\x1f\x41\x3d\x52\x20\x27\xad\x68\x10\x0b\xb1\x44\xe3\x23\xc2\x39\x79\x98\x86\xc3\x3c\xc5\xd5\x55\xce\x49\x23\x0e\x43\x8c\x98\x10\xf2\x2d\x46\x9e\x10\x59\xac\x32\xc8\x7b\x75\x15\x32\xd7\xb5\x7e\x1c\x31\x3f\x4a\x51\x45\x5b\x40\xaf\x0e\xee\x70\x88\x91\x57\x40\xb4\x76\x7d\xb9\xf1\x1b\x62\xe3\x5c\x82\x73\x00\xe4\xc3\xd8\x91\x92\x31\x06\x41\xec\xb2\xf7\xde\x35\xe4\x51\x21\xe2\xb5\xb9\x1c\xc8\x66\x76\xf3\xba\x5c\x82\x04\x61\xc6\xae\x1f\x55\xb3\xda\x8a\xaa\xdb\x64\x7e\x88\xc4\xf1\x43\xac\x60\x57\x5e\x5b\x60\xb6\xfc\x71\x37\x2b\xea\x05\xac\xe5\xbf\x24\x7b\x62\xaa\xb6\x0a\xba\x7a\xf6\x7c\xa2\xab\xdb\xc8\x4a\xd6\x78\x15\x49\xe5\x35\x51\x5d\x4f\xd3\x52\xca\x3d\x4d\x4b\xe9\x26\xd5\xbc\x51\x0a\x99\x8e\x6b\x22\x8f\xff\x43\x0b\xf0\x56\x0c\xb9\x18\x64\xf5\xcf\x48\xe1\xf3\xd1\xf7\xbf\x8f\x4e\xcf\x6f\xa3\x82\xae\x7b\x88\xb3\x93\xe5\xd0\x0d\x52\x9c\x57\x41\x0f\x7a\x71\x1c\xcc\x16\x7b\xc2\x42\x36\x3d\x3b\x76\x29\x0e\x5d\x3a\xb6\x5a\x52\xe7\xd9\x38\x91\x46\xae\xa6\x09\xcd\x7b\x6d\x6e\x54\x1d\xda\xc7\xd8\x37\x55\x60\xe5\xda\x39\x74\x29\xb8\x83\x01\xf6\x59\x23\x4e\x23\x06\xaa\x18\x74\xad\xf0\x29\xb3\x5d\x87\xcc\x13\x91\xe3\x75\x5d\x9d\xa2\x57\x36\xce\x7a\x72\x2e\x14\x8c\xbf\x0f\x0f\xe6\x78\x18\x9d\x9e\x5f\xbc\xfc\xf1\xef\xbf\xce\x46\x5f\xbe\xae\x46\x43\x83\xa2\xcb\x30\x4b\xf0\xfa\x8b\x16\x98\x81\x9b\xb0\x96\x97\xa5\x33\x47\xc3\x41\xe0\xe0\x31\x93\x78\x19\xad\x76\xd7\xee\x38\xd0\x6a\x3b\x3b\x60\xc0\x8a\x6c\x22\x7b\xc3\x21\xd2\x82\x35\x58\x01\x03\x4c\xce\x49\x2b\x4a\x90\xb2\xc2\xc6\x62\xc1\x27\xeb\x5b\x7b\x76\xb7\x70\xba\xed\xd2\x27\x42\x58\x46\x19\xd9\x78\xb7\x6c\x17\x1a\x49\x16\x47\xd6\x44\xb2\x22\xb8\x45\x2f\x5b\x18\x4d\x86\xe7\x4c\x2d\x6c\xc9\x8f\x99\xbb\xd2\x5a\x98\xa5\xfd\xd6\xea\xdb\x1b\x7a\xe5\xb4\x2f\xd0\x5d\x81\xf0\xbd\xdd\xe6\xba\x63\xdf\xc8\x75\xd7\x76\xb2\x33\xe9\xb0\xb8\xa0\x7e\xfa\xd0\xee\xd8\xf2\x68\x97\xfa\xa1\x4b\x4f\x3e\xc2\x13\x21\xa0\x0e\x1f\x18\xba\x96\xcf\x43\xc9\xb5\xfb\x04\xcd\x47\x8f\x0b\x0d\xa1\x06\x0f\xac\x2b\x86\xee\xfb\x35\xb8\x7f\xe8\x06\xf2\x6e\xee\x44\xda\x57\x8e\x84\xc8\xed\x4c\x16\xaa\xec\xef\x1a\x70\x2e\xdf\x28\x9e\x72\xc6\x26\xbb\x74\x48\x26\x9d\x09\x67\x57\xd0\x31\xdc\x3f\xfd\x72\xf9\xfa\x65\x71\xa1\xae\x06\xfa\xa6\x1f\x79\x25\x90\x53\x4c\x64\xf8\x55\x17\xe8\x22\x17\x5d\x7b\xcb\x6e\x38\x92\x8a\x90\x4c\xfd\xbb\xb0\x02\xc6\x66\x67\x67\x7b\x11\x4b\x4a\x08\xd2\xe9\xb8\x1e\xd5\xf3\xc9\xe2\x9f\x69\xeb\x8e\x56\x9f\x4d\x9f\x26\xac\x1c\x82\xca\x0b\xcf\x5d\xe4\xaf\xaa\x74\xab\xb5\xdd\x72\xe0\x1d\x63\xba\x2b\x5c\x61\x51\xb1\xcd\xdc\x11\x4c\xb2\x15\xbc\x89\x28\xed\x74\x9a\x76\x07\x36\x3e\x83\x56\x13\x9a\x76\xb7\xf1\x9f\xc2\x96\x61\x56\x71\x8a\xc9\x89\x68\x5a\x60\xf6\xaf\xe6\x6e\x39\x0a\xd0\xd8\xd9\x6b\x3b\xe6\xb2\x05\x37\xeb\x63\xf1\x5a\x5d\x21\xb7\xb9\x65\x79\x49\xc5\x58\x1d\x91\x7f\x03\x00\x00\xff\xff\x0d\xa7\x6a\x94\xf0\x10\x00\x00")

func assetsTplCurdTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplCurdTpl,
		"assets/tpl/curd.tpl",
	)
}

func assetsTplCurdTpl() (*asset, error) {
	bytes, err := assetsTplCurdTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/curd.tpl", size: 4336, mode: os.FileMode(438), modTime: time.Unix(1578623734, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplEntityTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x41\x0a\xc2\x40\x0c\x45\xf7\x85\xde\x21\x8b\x2e\xa5\x07\x10\x5c\x09\x5d\x76\x21\xbd\xc0\x68\x83\x54\x67\x3a\x25\x4d\x29\x25\xe4\xee\x12\x75\xa4\x54\xc1\x59\x4d\x5e\xfe\x0f\x2f\xcf\x44\xca\xc6\x9d\x3d\x1e\x63\x08\xd8\xb3\x6a\x9e\xf1\x32\x20\x24\xae\x0a\x23\xd3\x74\x61\x10\x0b\x93\xeb\xaf\x08\xc5\x6d\x07\x45\xc7\x18\x60\x7f\x80\xb2\xea\xd0\xb7\xa3\xaa\xc8\x93\x95\xb5\x0b\x56\x7b\xbd\x04\x9b\x65\x78\xc3\x44\xaa\x48\xc1\x71\x2a\xc3\x26\x7f\xc2\xe0\xe8\x6e\x3a\x22\xd8\xb7\xf6\xd1\x2f\xdb\x7a\xf2\x7e\x6d\x6c\xf3\x1f\x6b\x8a\xf3\x56\x9a\xe2\xbc\x72\x4e\xc0\x4e\x7d\x9c\x61\xb5\xf9\x65\xf6\x08\x00\x00\xff\xff\x6e\x2e\x32\xff\x48\x01\x00\x00")

func assetsTplEntityTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplEntityTpl,
		"assets/tpl/entity.tpl",
	)
}

func assetsTplEntityTpl() (*asset, error) {
	bytes, err := assetsTplEntityTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/entity.tpl", size: 328, mode: os.FileMode(438), modTime: time.Unix(1553610707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplExampleTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x6d\x6b\xdc\x46\x10\xfe\x2e\xd0\x7f\xd8\x0a\xee\x22\x99\x8b\xe4\xd4\x49\x09\x82\xa3\xed\xbd\x84\x06\x92\xd4\xc5\x2e\xfd\x50\x4a\xd8\x93\xf6\xee\x16\x4b\xbb\xba\xdd\x55\x1a\xd7\x18\x2e\x50\x9a\x84\x24\x76\x20\x4d\x02\xad\xd3\x77\xf7\x85\x42\xed\x0f\xa5\x31\x97\x94\xfe\x19\x4b\x67\xff\x8b\x32\x92\xee\xcd\x38\xc5\xb4\x18\xfa\x6d\x76\x76\x66\x67\xe6\x79\x9e\xd9\x08\x7b\x2b\xb8\x43\x50\xc8\x7d\x12\x48\x5d\xd3\x35\x1a\x46\x5c\x28\x64\xea\x9a\xe1\x63\x85\x5b\x58\x12\x47\xf6\x02\x43\xd7\x8c\x76\xa8\x0c\x5d\xbb\x8e\x8c\x0e\x55\xdd\xb8\x65\x7b\x3c\x74\x3a\xfc\xac\xec\x05\x67\x7d\x41\x6f\x10\xe1\x84\xab\x45\xa8\x22\x52\x51\xd6\x01\x53\x2a\x41\x59\x47\x82\xc9\x88\x72\x62\x01\x01\x16\x94\x52\xab\x11\x41\x8d\x5a\x9d\xb3\x36\xed\x34\x99\xa2\x6a\x15\x49\x25\x62\x4f\xa1\x35\x5d\x7b\x87\x4b\x85\x10\x42\x79\x3e\x72\x9c\x64\x6b\x37\x79\xd6\xd7\xb5\x45\xe8\x0f\x21\x44\x99\x42\x8e\x33\xfc\x75\x27\xd9\xfc\x5e\xd7\xae\xe1\x90\xcc\x84\x0f\x3f\xff\x39\xbd\xf3\x5c\xd7\x16\xb1\x94\xb3\xef\xec\x7c\x36\xfc\xe6\x96\xae\x35\x6a\x79\xce\xe4\x62\xf0\x28\x79\xf8\x40\xd7\xea\x5d\x2c\x24\x51\x53\x4f\xbd\x7c\x92\x65\x2c\xd3\x90\x7c\xc2\x19\x99\xdc\xa4\x4f\xff\x48\xee\x0f\x74\xed\x2a\xbe\x79\xd9\x0f\x48\xd1\x53\xba\xd5\x4f\x7e\xf8\x69\xf8\xcb\xe0\xf0\xe9\xef\x07\x7f\x7d\x95\x6e\x6c\x67\x11\xef\x46\x84\xcd\x44\xe4\x77\xe9\xe3\x5d\x5d\x5b\x07\x40\x1c\x67\xec\x49\x1f\xfc\x96\x0c\x1e\xe9\x5a\x3b\x66\x1e\xba\xcc\xa8\x6a\xd4\x4c\xaf\xdd\x39\x02\x97\x85\xe6\x64\x2f\xb0\x1b\x35\x00\x8c\xb6\x8b\xbe\xa4\xdd\xec\xc5\x38\xb8\xc4\x03\x1f\x72\xec\x51\xdb\x15\x64\x18\x16\x44\x4e\x3b\x51\x15\x19\x67\xde\x96\x14\x3b\x4b\x5d\xcc\x3a\x5d\x4c\xcf\x18\x59\x3b\xbe\x64\xc8\xad\xa2\x76\xa8\xec\xa5\x48\x50\xa6\xda\xa6\x51\x92\x6e\x49\xbe\xa5\xbc\xc8\x04\xcb\xb7\x9c\x92\x7c\xd3\xcb\xd1\xaa\x96\x64\x39\x02\x0b\x1e\xae\x2a\x11\x93\x72\xc0\xbd\xea\x15\xee\xe1\xa0\xac\x68\x48\xae\x43\xb5\x6a\x49\x1a\x95\xbc\x01\x00\xbf\x30\x81\xa2\xc2\x04\xd6\x47\x5e\x2e\x46\x66\x4e\x55\x71\x28\xe8\xa9\xe8\x5a\x2c\x02\xfb\xbd\x98\x88\xd5\xa6\xf4\x70\x44\x66\x86\xb5\x2a\x99\xca\x3c\xce\x18\xf1\x14\xe5\xac\x82\x88\x10\x30\x11\x20\x06\x54\x98\x46\x2e\xd7\x0a\xf2\x25\xb3\x32\xfc\x20\xe2\xb5\x2a\x62\x34\x00\x98\x22\xcc\xa8\x67\x12\x21\xac\x0c\x90\xc9\x53\xf6\x12\x51\x05\x9f\x75\xce\x98\xcc\x0a\x17\x0e\xeb\x98\x40\x90\xc6\x4c\x20\x38\x2c\x5d\x13\x44\xc5\x82\xa1\x49\x7c\x56\xe7\x06\x16\xa8\x51\x1b\x31\x9b\x9f\xd7\xd6\x32\xbc\xd6\xd7\x1b\x2d\x34\x37\x3e\x5c\x85\xad\x05\xe1\x64\x2a\xa1\x8c\xaa\xfa\xf8\x29\x73\xc4\x34\x8c\x3c\xab\x9a\x62\xb9\x5c\x23\x00\x72\xba\x5c\x2a\xe0\x04\xe0\x76\x17\x16\xe6\x2f\x56\xf2\x65\x72\x0d\xc1\x79\x7e\x83\xa5\x74\x8d\x73\xaf\x2f\x9c\xbf\xf0\x06\x9c\x73\x36\x5c\x63\x85\x32\x3f\x20\x3e\xb8\x0a\x4e\x5c\x23\x56\xed\x8b\x61\xeb\x3c\xf8\x0a\x40\xdc\x73\xf3\x95\xf1\x82\xb8\xe8\x42\x25\x1b\xb2\x51\x43\xd5\x29\x5d\x5b\xba\x36\x3d\x62\x15\x5d\x23\x1f\x8f\x1d\x66\xa3\x66\x8d\x37\x24\xfd\x7a\xfb\x60\xe7\xbb\xf4\x6e\x3f\xdd\xba\x3b\xfc\xe2\xd3\x7c\x55\x0a\x04\x96\x89\x54\xe3\xac\x4b\x94\xf9\x1f\x74\x89\x20\xa6\x42\x73\xc5\x7f\x64\x2f\x67\xa8\x1c\x45\x4a\xd7\x5a\x9c\xaf\x00\x50\xe3\xec\x35\xa8\xa5\xb8\xcf\xb3\xc2\x82\xc8\x38\x50\x63\x05\x4d\xb5\x6a\x43\x19\xb3\x0c\xf9\x16\x7c\x21\xb7\xff\x4c\x1f\xef\x1e\xde\xbe\x7f\xb8\xd5\x3f\xf8\xf1\x56\x7a\xef\x65\xba\xb1\xbd\xbf\xd7\xdf\xdf\xbb\x27\x7b\xc1\x31\x1a\x53\x76\x53\x08\x2e\x26\x2a\x83\x7d\x5b\x84\x75\x0b\x98\x99\x97\xfd\x70\xfe\xa3\xfc\xca\x71\x0e\x36\x9e\x27\x9b\x4f\xe0\xf3\x78\xb8\xb1\xbf\xd7\x4f\x9f\x7d\xfb\xea\xf9\xaf\x60\xa9\x4e\x32\xfa\x3f\xce\x26\xa4\x32\x19\x0d\x8e\xdb\x8e\x13\x74\x7e\xa4\xed\xfe\x8b\x0c\x9b\xcd\xe3\xba\xad\xf3\x98\xfd\x5f\xda\x4d\xee\x7c\x99\xbc\x18\xbc\x1a\xd9\xba\x20\x58\x9d\x48\x56\xbe\xff\xef\x44\x55\x54\x28\xfb\xfe\xe9\x8c\xd2\xbc\x89\xc3\x28\x20\xef\x47\xfe\x29\x0f\x52\x54\xf8\x6f\x83\xfc\x1d\x00\x00\xff\xff\x4a\x38\x2b\x72\xa5\x08\x00\x00")

func assetsTplExampleTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplExampleTpl,
		"assets/tpl/example.tpl",
	)
}

func assetsTplExampleTpl() (*asset, error) {
	bytes, err := assetsTplExampleTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/example.tpl", size: 2213, mode: os.FileMode(438), modTime: time.Unix(1553610707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplMarkdownTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xc1\x6a\xea\x40\x14\x86\xf7\x81\xbc\xc3\x81\xb8\x50\xb8\xc9\x03\x08\xf7\x6e\xae\x1b\xb9\x17\xeb\x42\xba\x11\x17\xb1\x9e\x16\x69\x92\x96\x68\xa0\x61\x66\xc0\x45\xa1\x85\xd2\xd6\x45\xc1\xac\x0a\x05\x11\xbb\xa8\x52\xda\x82\x98\x3e\x8e\x19\xf5\x2d\x4a\x66\x9c\xd4\x56\x9a\xc5\x84\xf9\xff\xc3\xf9\x4f\xbe\x13\xc3\x80\xd5\xc3\x98\xf7\x62\x3e\x3a\xd7\x35\x5d\xa3\xc9\xfc\x36\xb9\x1c\xd0\x54\x4d\xfa\xd7\x40\x61\x35\x7d\xe5\xd1\x0d\x50\x48\x86\x17\xfc\x65\x0c\x54\xd7\x68\xd1\x34\x4d\x71\xa8\x13\xe4\x4b\xd7\x08\xf1\x6d\xef\x08\xc1\xaa\xd9\x4d\x07\xff\xb7\x3b\x5d\xc6\x28\x10\x62\x95\xbd\x16\x9e\x31\x46\xeb\xe9\x45\x98\x15\xdb\x45\xc6\x1a\x79\xe3\xd3\xfd\x6a\x15\x40\x3e\x94\x10\xeb\xef\x89\xeb\xa2\x27\x9a\x89\x14\xf4\x5a\x8c\xa5\x03\xab\xc0\xdc\x31\x86\xbf\x20\xd7\xee\xa2\x0b\xc5\xdf\x60\x95\xb0\x73\x20\xe3\x75\xcd\x30\x0c\x20\x44\x78\x2a\xc9\x52\xf7\xad\x3c\x5d\xfb\x93\x95\x65\x79\x69\x86\x29\x68\x3c\x0d\xf8\xe4\x4d\xd2\x90\xa4\x84\x00\x14\x96\xcf\x71\x72\x7f\x05\x14\x78\x34\x4d\xfa\xa3\xc5\x6c\xbe\x7c\x9c\x53\x58\xc7\xd1\x6a\x32\x4c\x7a\xef\x99\xc3\xa3\xe9\x62\x16\xaf\xef\x26\xbb\x58\x15\x55\x73\x97\xed\x37\x61\x0b\xb2\x1c\x75\x03\x59\x40\x72\x02\xd7\x93\x1f\x03\x20\xb0\x4b\xa9\x16\x9e\x62\x25\x70\x9b\xe8\x33\x26\xf5\x72\xa7\x12\x38\xce\x66\x37\x25\x3c\xb4\x03\xa7\xbb\x6f\x3b\x01\xaa\x82\xaa\xdf\x76\x6d\x3f\xfc\x87\xa1\x52\x64\xab\x1f\x16\x51\xaf\xed\x55\x1b\x79\x23\xfb\x97\x0a\x99\xf7\x11\x00\x00\xff\xff\x54\x04\xaf\xad\x62\x02\x00\x00")

func assetsTplMarkdownTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplMarkdownTpl,
		"assets/tpl/markdown.tpl",
	)
}

func assetsTplMarkdownTpl() (*asset, error) {
	bytes, err := assetsTplMarkdownTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/markdown.tpl", size: 610, mode: os.FileMode(438), modTime: time.Unix(1553610707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplTablesTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xe5\x4a\xce\xcf\x2b\x2e\x51\xd0\xe0\xe5\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xd4\x51\x50\xc9\x2c\x49\xcd\x55\xb0\xb2\x55\xd0\xab\xad\x05\xc9\x80\xf9\x7a\xa1\x05\x05\xa9\x45\x21\x89\x49\x39\xa9\x7e\x89\xb9\xa9\xb5\xb5\x0a\x0a\x0a\x0a\xb6\x0a\x4a\x30\x69\x24\x19\x25\x05\x7d\x7d\x98\xb0\x73\x7e\x6e\x6e\x6a\x5e\x49\x6d\x6d\x75\x75\x6a\x5e\x0a\xc8\x3c\x4d\x40\x00\x00\x00\xff\xff\xe0\x46\x88\x70\x76\x00\x00\x00")

func assetsTplTablesTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplTablesTpl,
		"assets/tpl/tables.tpl",
	)
}

func assetsTplTablesTpl() (*asset, error) {
	bytes, err := assetsTplTablesTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/tables.tpl", size: 118, mode: os.FileMode(438), modTime: time.Unix(1553610707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/tpl/curd.tpl":     assetsTplCurdTpl,
	"assets/tpl/entity.tpl":   assetsTplEntityTpl,
	"assets/tpl/example.tpl":  assetsTplExampleTpl,
	"assets/tpl/markdown.tpl": assetsTplMarkdownTpl,
	"assets/tpl/tables.tpl":   assetsTplTablesTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"tpl": &bintree{nil, map[string]*bintree{
			"curd.tpl":     &bintree{assetsTplCurdTpl, map[string]*bintree{}},
			"entity.tpl":   &bintree{assetsTplEntityTpl, map[string]*bintree{}},
			"example.tpl":  &bintree{assetsTplExampleTpl, map[string]*bintree{}},
			"markdown.tpl": &bintree{assetsTplMarkdownTpl, map[string]*bintree{}},
			"tables.tpl":   &bintree{assetsTplTablesTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
